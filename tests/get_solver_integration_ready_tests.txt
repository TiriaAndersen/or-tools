Trying to make or-tools summonable by a higher level module (as in it uses or-tools as a sub-solver) in python.

This is  a log of command line inputs and outputs.
Each subsequent program is a duplicate of the previous, with some changes.

 As my basis CVRP program, I used the Python version of the complete program found here: https://developers.google.com/optimization/routing/cvrp
Technically the final product has two capacities - demand and vehicle fuel - but we only deal with demand for now.

First, let's check that python is working:
--------------------------------------------------------------------------
C:\Users\jc321076\github\or-tools>python tests/example_routing.py
Route for vehicle 0:
 0 ->  8 ->  6 ->  2 ->  5 -> 0
Distance of the route: 1552m

Route for vehicle 1:
 0 ->  7 ->  1 ->  4 ->  3 -> 0
Distance of the route: 1552m

Route for vehicle 2:
 0 ->  9 ->  10 ->  16 ->  14 -> 0
Distance of the route: 1552m

Route for vehicle 3:
 0 ->  12 ->  11 ->  15 ->  13 -> 0
Distance of the route: 1552m

Maximum of the route distances: 1552m

--------------------------------------------------------------------------


Okay, that works. Now, let's do the same but for the CVRP:
--------------------------------------------------------------------------
C:\Users\jc321076\github\or-tools>python tests/external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 1:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


Can we solve external_data_routing.py when located outside the or-tools folder?
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 1:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


Seems so! What if we move the file to a completely different location?
--------------------------------------------------------------------------
C:\Users\jc321076\Documents>python external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 1:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


Yup, seems to work! Okay, now I  want to summon both or-tools and VRPModelling in separate folder.
I moved external_data_routing.py back into the github folder that contains both or-tools and VRPModelling folders.
I changed the number for vehicles from 4 to 1:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py

C:\Users\jc321076\github>

--------------------------------------------------------------------------


It spend maybe 5 minutes running and did not produce anything.
It seems that or-tools doesn't by default understand "one vehicle making multiple routes".
For now, we can workaround it by having lots of dummy vehicles, each one representing a trip made by the single vehicle.

  data['vehicle_capacities'] = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15]  # TODO: make this dependent on num of vehicles for bandaid
    data['num_vehicles'] = 10  # larger number, higher than the number of routes

This won't work for a dynamic case, because events turn up on a timeline.
Anyway, I'll use the workaround for now and deal with it at the dynamic stage.
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 4:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


There is an extra empty route there, so I know there are enough dummy vehicles assigned.

Now, I want to import my VRPModeling classes into external_data_routing.py:

  from VRPModeling.Depot import Depot
  depot1 = Depot(0, [0, 0])
  print(depot1.__str__())

I comment out the print_solution() command so the output is less cluttered.
Running it:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Traceback (most recent call last):
  File "external_data_routing.py", line 8, in <module>
    from VRPModeling.Depot import Depot
  File "C:\Users\jc321076\github\VRPModeling\Depot.py", line 1, in <module>
    from Node import Node
ModuleNotFoundError: No module named 'Node'

--------------------------------------------------------------------------


So the issue isn't the first import, but the import line within Depoty.py, because it assumes Node.py is in the same folder, but external_data_routing.py doesn't know where Node.py is.
According to this stack overflow answer, we can use a relative reference to fix this:
https://stackoverflow.com/questions/40397851/python-cant-find-a-module-that-is-imported-in-another-module
I modify Depot.py in VRPModeling:

  from .Node import Node

And run again:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Depot.id = 0
Depot.location = [0, 0]
--------------------------------------------------------------------------


Excellent. I modify all imports in VRPModeling classes to a relative reference.
Then I create add more objects needed for a VRP instance (just the dummy instance found in VRPModeling's sandbox):

  from Vehicle import Vehicle
  vehicle1 = Vehicle(11, 0.8)
  print(vehicle1.__str__())

  from VRPInstance import VRPInstance
  vrp1 = VRPInstance(vehicle1, depot1)

  from Node import Node
  import random
  random.seed(7)
  for i in range(7):
      x = random.randrange(12)
      y = random.randrange(15)
      demand = random.randrange(5, 50, 5)
      vrp1.add_node([x, y], demand)
  print(vrp1.__str__())
  print(vrp1.nodes_details())

Running it:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Depot.id = 0
Depot.location = [0, 0]
Vehicle.capacities = 11
Vehicle.variable_cost = 0.8
name = Andersen_n8
Vehicle.capacities = 11
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance: 7
arcs in instance: 7
id    location    demand
1     [5, 2]      35
2     [10, 0]      10
3     [8, 1]      30
4     [9, 0]      45
5     [3, 0]      10
6     [6, 6]      10
7     [3, 1]      45

--------------------------------------------------------------------------


Now I want VRPModeling to spit out data that is digestible by or-tools.
I created a function called get_distance_matrix() in VRPInstance.
I want to store the distance matrix as a sparse matrix since not all nodes will necessarily have arcs connecting them.
I'm assuming that numpy's array is best for the job, but happy to change if not the case.

...I just realised that or-tools doesn't actually need a distance matrix.
It uses a distance callback - in the example program, it is defined as below:

  def distance_callback(from_index, to_index):
      """Returns the distance between the two nodes.
      Basically the way the system internally accesses the distance matrix
      """

      # Convert from routing variable Index to distance matrix NodeIndex.
      from_node = manager.IndexToNode(from_index)
      to_node = manager.IndexToNode(to_index)
      return data['distance_matrix'][from_node][to_node]

So I can redefine the distance callback to pull distances straight from VRPInstance's arcs list, instead from a distance matrix!
(I also refactored Node.id as an int, and arcs keys as the Node id)
The new redefinition:

  def distance_callback(from_index, to_index):
      """Returns the distance between the two nodes. Distance MUST BE INTEGER!
      Distance values are scaled by 100. Note that solution printer must scale down by 100.

      Basically the way the system internally accesses the distance matrix.
      """

      # Convert from routing variable Index to distance matrix NodeIndex.
      from_node = manager.IndexToNode(from_index)
      to_node = manager.IndexToNode(to_index)
      distance = vrp_instance.arcs[from_node][to_node].distance
      distance = int(round(distance * 100))  # scaling to keep float precision
      print("distance from node {0} to node {1} is {2}\n".format(from_node, to_node, distance))

      return distance

  distance_callback(1, 2)

I call distance_callback to check that it's working.
Yes, the distance given is a scale version of the value from the distance matrix.
(remember that node 0 is the first column of the distance matrix)
--------------------------------------------------------------------------

[[ 0.          5.38516481  1.          5.09901951  8.54400375  6.08276253
   3.16227766 10.        ]
 [ 5.38516481  0.          5.09901951  5.          3.16227766  5.65685425
   4.12310563  5.        ]
 [ 1.          5.09901951  0.          4.12310563  8.24621125  5.09901951
   2.23606798  9.43398113]
 [ 5.09901951  5.          4.12310563  0.          7.28010989  1.
   2.          7.07106781]
 [ 8.54400375  3.16227766  8.24621125  7.28010989  0.          7.61577311
   7.          3.        ]
 [ 6.08276253  5.65685425  5.09901951  1.          7.61577311  0.
   3.          7.        ]
 [ 3.16227766  4.12310563  2.23606798  2.          7.          3.
   0.          7.61577311]
 [10.          5.          9.43398113  7.07106781  3.          7.
   7.61577311  0.        ]]
distance from node 1 to node 2 is 510
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  4 Load(4) ->  3 Load(6) ->  1 Load(7) ->  0 Load(7)
Distance of the route: 0m
Load of the route: 7

Route for vehicle 4:
 0 Load(0) ->  7 Load(8) ->  6 Load(12) ->  5 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 0m
Load of the route: 15

Total distance of all routes: 0m
Total load of all routes: 22

--------------------------------------------------------------------------


But the distances given in the solution is 0! Why?
I go back to the old distance callback:
--------------------------------------------------------------------------

Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  5 Load(2) ->  6 Load(6) ->  2 Load(7) ->  1 Load(8) ->  4 Load(12) ->  3 Load(14) ->  0 Load(14)
Distance of the route: 2464m
Load of the route: 14

Route for vehicle 4:
 0 Load(0) ->  7 Load(8) ->  0 Load(8)
Distance of the route: 388m
Load of the route: 8

Total distance of all routes: 2852m
Total load of all routes: 22
[Finished in 1.764s]

--------------------------------------------------------------------------

So the old distance callback works.
Let's try putting our VRPInstance through create_data_model():.

    def create_data_model(vrp_instance):  # We can replace this with a VRPModeling structure?, or a read-in
        """Stores the data for the problem. Creates a dictionary, to be exact. """

        data = {}
        data['distance_matrix'] = vrp_instance.get_distance_matrix()
        print(data['distance_matrix'])

We print out the distance matrix to make sure it works.
--------------------------------------------------------------------------
[[ 0.          5.38516481  1.          5.09901951  8.54400375  6.08276253  3.16227766 10.        ]
 [ 5.38516481  0.          5.09901951  5.          3.16227766  5.65685425  4.12310563  5.        ]
 [ 1.          5.09901951  0.          4.12310563  8.24621125  5.09901951  2.23606798  9.43398113]
 [ 5.09901951  5.          4.12310563  0.          7.28010989  1.          2.          7.07106781]
 [ 8.54400375  3.16227766  8.24621125  7.28010989  0.          7.61577311  7.          3.        ]
 [ 6.08276253  5.65685425  5.09901951  1.          7.61577311  0.          3.          7.        ]
 [ 3.16227766  4.12310563  2.23606798  2.          7.          3.          0.          7.61577311]
 [10.          5.          9.43398113  7.07106781  3.          7.          7.61577311  0.        ]]
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  7 Load(13) ->  0 Load(13)
Distance of the route: 21m
Load of the route: 13

Route for vehicle 4:
 0 Load(0) ->  2 Load(1) ->  6 Load(5) ->  3 Load(7) ->  5 Load(9) ->  0 Load(9)
Distance of the route: 12m
Load of the route: 9

Total distance of all routes: 33m
Total load of all routes: 22
[Finished in 0.398s]
--------------------------------------------------------------------------

Hm. The distance still shows.
More interestingly the solution is different from when the distance callback used arcs.
Is it because distance matrix values are floats?
or-tools supposedly needs integer values, but it seems to produce a solution anyway?
Let's try scaling and rounding to an integer:

data['distance_matrix'] = np.rint(vrp_instance.get_distance_matrix() * 100)

The solution might change due to precision:
--------------------------------------------------------------------------

[[   0.  539.  100.  510.  854.  608.  316. 1000.]
 [ 539.    0.  510.  500.  316.  566.  412.  500.]
 [ 100.  510.    0.  412.  825.  510.  224.  943.]
 [ 510.  500.  412.    0.  728.  100.  200.  707.]
 [ 854.  316.  825.  728.    0.  762.  700.  300.]
 [ 608.  566.  510.  100.  762.    0.  300.  700.]
 [ 316.  412.  224.  200.  700.  300.    0.  762.]
 [1000.  500.  943.  707.  300.  700.  762.    0.]]
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  7 Load(13) ->  0 Load(13)
Distance of the route: 2155m
Load of the route: 13

Route for vehicle 4:
 0 Load(0) ->  6 Load(4) ->  3 Load(6) ->  5 Load(8) ->  2 Load(9) ->  0 Load(9)
Distance of the route: 1226m
Load of the route: 9

Total distance of all routes: 3381m
Total load of all routes: 22
[Finished in 0.469s]

--------------------------------------------------------------------------


Okay, weird. The solution did change slightly.
But it's really similar to the previous solution, with the same nodes in each route.
Just the order in the second route is swapped around.
It's still not similar to the arcs distance callback though.

I want to directly pull the distances from arcs instead of having to got through the get_distance_matrix() function.
A thought: VRPInstance.arcs doesn't actually store arcs going from a node to itself.
Distance matrices on the other hand store zeros on the diagonal. Does that matter?

    def distance_callback(from_index, to_index):

        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        if from_node == to_node:
            distance = 0
        else:
            distance = (vrp_instance.arcs[from_node][to_node]).distance
            distance = round(distance * 100)
        return distance

Now:
--------------------------------------------------------------------------

Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  7 Load(13) ->  0 Load(13)
Distance of the route: 2155m
Load of the route: 13

Route for vehicle 4:
 0 Load(0) ->  6 Load(4) ->  3 Load(6) ->  5 Load(8) ->  2 Load(9) ->  0 Load(9)
Distance of the route: 1226m
Load of the route: 9

Total distance of all routes: 3381m
Total load of all routes: 22
[Finished in 0.433s]

--------------------------------------------------------------------------


Yes! It was the zeroes!
The solution is the same as the old distance callback on the VRPInstance.
But showing the distance this time.
The bug is fixed!

I want to get rid of create_data_model() completely and transfer everything to create_random_vrp_instance().
The next task is to extract demands directly from vrp_instance.nodes[index].demand

    # Add Capacity constraint
    def demand_callback(from_index):
        "Returns the demand of the node"
        # Convert from routing variable Index to demands NodeIndex
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]
        return demand

Changed to:

        def demand_callback(from_index):
            from_node = manager.IndexToNode(from_index)
            demand = vrp_instance.nodes[from_node].demand
            print(demand)
            return demand

And the one reference in the solution printer is adjusted:

    route_load += vrp_instance.nodes[node_index].demand

I print the demand so we can see if it extract it properly:
--------------------------------------------------------------------------
id    location    demand
0     [0, 0]      0
1     [5, 2]      35
2     [0, 1]      45
3     [1, 5]      5
4     [8, 3]      5
5     [1, 6]      35
6     [1, 3]      10
7     [8, 6]      5
0
35
45
5
5
35
10
5
45
....
0
45
0
35
[Finished in 0.569s]
--------------------------------------------------------------------------


It extracts properly, but doesn't print out the solution?
Ah! What if there is no possible solution because the vehicle capacities are too small:

  data['vehicle_capacities'] = [15, 15, 15, 15, 15]

Let's reduce the demand range to 15 when we generate the demand in create_random_vrp_instance():

    demand = random.randrange(1, 15, 1)

Aaaaand:
--------------------------------------------------------------------------
id    location    demand
0     [0, 0]      0
1     [5, 2]      7
2     [0, 1]      14
3     [8, 1]      6
4     [9, 0]      9
5     [3, 0]      2
6     [6, 6]      2
7     [3, 1]      9
[0, 7, 14, 6, 9, 2, 2, 9]
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  3 Load(6) ->  4 Load(15) ->  0 Load(15)
Distance of the route: 1847m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  6 Load(2) ->  1 Load(9) ->  5 Load(11) ->  0 Load(11)
Distance of the route: 1844m
Load of the route: 11

Route for vehicle 3:
 0 Load(0) ->  7 Load(9) ->  0 Load(9)
Distance of the route: 632m
Load of the route: 9

Route for vehicle 4:
 0 Load(0) ->  2 Load(14) ->  0 Load(14)
Distance of the route: 200m
Load of the route: 14

Total distance of all routes: 4523m
Total load of all routes: 49
[Finished in 0.424s]

--------------------------------------------------------------------------


Next I want to get rid of data['vehicle_capacities'] and extract that number straight from create_random_vrp_instance():

  from VRPModeling.Vehicle import Vehicle
    vehicle1 = Vehicle(15)

Since my problem only has 1 vehicle with one capacity, we don't need the vector of vehicle capacities as found in the original:

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
      routing.AddDimensionWithVehicleCapacity(
          demand_callback_index,
          0,  # null capacity slack
          data['vehicle_capacities'],
          True,  # start culum to zero
          'Capacity')

Instead of AddDimensionWithVehicleCapacity(), we can just use AddDimension() with a single upper bound capacity:

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimension(
        demand_callback_index,
        0,  # null capacity slack https://developers.google.com/optimization/routing/dimensions#slack_variables
        vrp_instance.vehicle.capacity,
        True,  # start culum to zero
        'Capacity')

This should give us the same solution.
--------------------------------------------------------------------------

Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  3 Load(6) ->  4 Load(15) ->  0 Load(15)
Distance of the route: 1847m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  6 Load(2) ->  1 Load(9) ->  5 Load(11) ->  0 Load(11)
Distance of the route: 1844m
Load of the route: 11

Route for vehicle 3:
 0 Load(0) ->  7 Load(9) ->  0 Load(9)
Distance of the route: 632m
Load of the route: 9

Route for vehicle 4:
 0 Load(0) ->  2 Load(14) ->  0 Load(14)
Distance of the route: 200m
Load of the route: 14
Total distance of all routes: 4523m
Total load of all routes: 49
[Finished in 0.4s]

--------------------------------------------------------------------------


Yep!
Okay, now I want to load a toy VRP instance file using import_from_vrp_file() from FileProcessor in external_data_routing.py :

    def import_vrp_instance_from_file(absolute_path):
        from VRPModeling.FileProcessor import FileProcessor
        proc = FileProcessor()
        vrp_instance = proc.import_from_vrp_file(absolute_path)

        return vrp_instance

I choose to load up Andersen_n8. I changed the vehicle capacity of Andersen_n8 from 11 to 50, since the highest node demand is 45.
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 50

id    location    demand
0     [0, 0]      0
1     [5, 13]      5
2     [9, 4]      15
3     [1, 0]      15
4     [8, 3]      20
5     [4, 10]      25
6     [10, 4]      45
7     [1, 1]      35
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  1 Load(5) ->  5 Load(30) ->  0 Load(30)
Distance of the route: 2786m
Load of the route: 30

Route for vehicle 2:
 0 Load(0) ->  6 Load(45) ->  0 Load(45)
Distance of the route: 2154m
Load of the route: 45

Route for vehicle 3:
 0 Load(0) ->  3 Load(15) ->  4 Load(35) ->  2 Load(50) ->  0 Load(50)
Distance of the route: 1988m
Load of the route: 50

Route for vehicle 4:
 0 Load(0) ->  7 Load(35) ->  0 Load(35)
Distance of the route: 282m
Load of the route: 35

Total distance of all routes: 7210m
Total load of all routes: 160
[Finished in 0.431s]

--------------------------------------------------------------------------


Hm. So I now have 2 issues:
1. The vehicle capacity needs to always be greater than the largest node demand.
Otherwise, or-tools will refuse to solve.
2. The number of vehicles need to be greater than the number of routes required.
Otherwise, again, or-tools won't produce a solution.
(Note that there is only one vehicle, and having several 'dummy vehicles' simply represents multiple trips at this point)

I think I will solve issue 1. by not allowing VRPInstance to add_node(demand) if the demand > vehicle capacity.
I changed the vehicle capacity of Andersen_n8 to 30:
--------------------------------------------------------------------------
NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
id    location    demand
0     [0, 0]      0
1     [5, 13]      5
2     [9, 4]      15
3     [1, 0]      15
4     [8, 3]      20
5     [4, 10]      25
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  1 Load(5) ->  5 Load(30) ->  0 Load(30)
Distance of the route: 2786m
Load of the route: 30

Route for vehicle 3:
 0 Load(0) ->  4 Load(20) ->  0 Load(20)
Distance of the route: 1708m
Load of the route: 20

Route for vehicle 4:
 0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
Distance of the route: 1979m
Load of the route: 30

Total distance of all routes: 6473m
Total load of all routes: 80
[Finished in 0.401s]

--------------------------------------------------------------------------


Hm. It may be a pain to print out "Node at location [bla, bla] could not be added...."
every single time, especially if a large number of nodes can't be added.
We don't want to flood the output.
Consider a debug mode?

Okay, now I want to solve a benchmark problem:
"C:/Users/jc321076/Documents/PhD/github/Autonomous_DSVRP/Instances/Vrp-Set-X/Vrp-Set-X/Vrp-Set-X/X/X-n101-k25.vrp"

I don't know how many routes we'll need, but the number of vehicles is 25, so I'll set num_vehicles to 30.
--------------------------------------------------------------------------
NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 211524m
Load of the route: 205

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 4:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 101298m
Load of the route: 178

Route for vehicle 5:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 222501m
Load of the route: 202

Route for vehicle 6:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 153432m
Load of the route: 204

Route for vehicle 7:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 134427m
Load of the route: 203

Route for vehicle 8:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 131452m
Load of the route: 196

Route for vehicle 9:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 145608m
Load of the route: 201

Route for vehicle 10:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 120459m
Load of the route: 196

Route for vehicle 11:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 122076m
Load of the route: 201

Route for vehicle 12:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 123972m
Load of the route: 206

Route for vehicle 13:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 100658m
Load of the route: 183

Route for vehicle 14:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 113861m
Load of the route: 185

Route for vehicle 15:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 108385m
Load of the route: 199

Route for vehicle 16:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 98853m
Load of the route: 202

Route for vehicle 17:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 89996m
Load of the route: 188

Route for vehicle 18:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 136370m
Load of the route: 203

Route for vehicle 19:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 83842m
Load of the route: 205

Route for vehicle 20:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 84465m
Load of the route: 200

Route for vehicle 21:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 80718m
Load of the route: 191

Route for vehicle 22:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 84120m
Load of the route: 199

Route for vehicle 23:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 103443m
Load of the route: 206

Route for vehicle 24:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 47443m
Load of the route: 144

Route for vehicle 25:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 57573m
Load of the route: 172

Route for vehicle 26:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 74781m
Load of the route: 172

Route for vehicle 27:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 53412m
Load of the route: 144

Route for vehicle 28:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 66675m
Load of the route: 184

Route for vehicle 29:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 89156m
Load of the route: 178

Total distance of all routes: 2940500m
Total load of all routes: 5147
[Finished in 1.031s]
--------------------------------------------------------------------------


The or-tools solution has 27 routes and a total distance of 27591m.
The optimal solution of this benchmark can be seen here:
http://vrp.galgos.inf.puc-rio.br/index.php/en/plotted-instances?data=X-n101-k25
It seems that the optimal solution uses 26 routes and has a proven optimality value of 27591m total distance.

Oops! I forgot that I was scale the coordinates up in distance callback in case they weren't integer:
    distance = round(distance * 100)
I've scaled them back down in print_solution():

    scaled_route_distance = routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
    route_distance += round(scaled_route_distance/100)

Which should give the same solution:
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 2116m
Load of the route: 205

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 4:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 1014m
Load of the route: 178

Route for vehicle 5:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 2225m
Load of the route: 202

Route for vehicle 6:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 1534m
Load of the route: 204

Route for vehicle 7:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1344m
Load of the route: 203

Route for vehicle 8:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 1314m
Load of the route: 196

Route for vehicle 9:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1455m
Load of the route: 201

Route for vehicle 10:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1205m
Load of the route: 196

Route for vehicle 11:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 1220m
Load of the route: 201

Route for vehicle 12:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 1238m
Load of the route: 206

Route for vehicle 13:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 1005m
Load of the route: 183

Route for vehicle 14:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 1139m
Load of the route: 185

Route for vehicle 15:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 1085m
Load of the route: 199

Route for vehicle 16:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 989m
Load of the route: 202

Route for vehicle 17:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 900m
Load of the route: 188

Route for vehicle 18:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 1364m
Load of the route: 203

Route for vehicle 19:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 838m
Load of the route: 205

Route for vehicle 20:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 844m
Load of the route: 200

Route for vehicle 21:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 808m
Load of the route: 191

Route for vehicle 22:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 841m
Load of the route: 199

Route for vehicle 23:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 1034m
Load of the route: 206

Route for vehicle 24:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 474m
Load of the route: 144

Route for vehicle 25:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 576m
Load of the route: 172

Route for vehicle 26:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 747m
Load of the route: 172

Route for vehicle 27:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 534m
Load of the route: 144

Route for vehicle 28:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 666m
Load of the route: 184

Route for vehicle 29:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 891m
Load of the route: 178

Total distance of all routes: 29400m
Total load of all routes: 5147
[Finished in 1.084s]

--------------------------------------------------------------------------


Looks like it has some effect on the accuracy...probably from the rounding.
I can amend this a little by:
1. scale by a higher magnitude to increase precision
2. descale AFTER the distances are added up.

        route_distance += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
    total_distance += route_distance
    total_load += route_load
    route_distance = round(route_distance/1000)
    plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index), route_load)
    plan_output += 'Distance of the route: {}m\n'.format(route_distance)
    plan_output += 'Load of the route: {}\n'.format(route_load)
    print(plan_output)
total_distance = round(total_distance/1000)
print('Total distance of all routes: {}m'.format(total_distance))

The individual route distances will still be imprecise, but the final distance will be more accurate:
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 2115m
Load of the route: 205

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 4:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 1013m
Load of the route: 178

Route for vehicle 5:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 2225m
Load of the route: 202

Route for vehicle 6:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 1534m
Load of the route: 204

Route for vehicle 7:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1344m
Load of the route: 203

Route for vehicle 8:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 1315m
Load of the route: 196

Route for vehicle 9:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1456m
Load of the route: 201

Route for vehicle 10:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1205m
Load of the route: 196

Route for vehicle 11:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 1221m
Load of the route: 201

Route for vehicle 12:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 1240m
Load of the route: 206

Route for vehicle 13:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 1007m
Load of the route: 183

Route for vehicle 14:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 1139m
Load of the route: 185

Route for vehicle 15:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 1084m
Load of the route: 199

Route for vehicle 16:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 989m
Load of the route: 202

Route for vehicle 17:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 900m
Load of the route: 188

Route for vehicle 18:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 1364m
Load of the route: 203

Route for vehicle 19:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 838m
Load of the route: 205

Route for vehicle 20:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 845m
Load of the route: 200

Route for vehicle 21:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 807m
Load of the route: 191

Route for vehicle 22:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 841m
Load of the route: 199

Route for vehicle 23:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 1034m
Load of the route: 206

Route for vehicle 24:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 474m
Load of the route: 144

Route for vehicle 25:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 576m
Load of the route: 172

Route for vehicle 26:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 748m
Load of the route: 172

Route for vehicle 27:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 534m
Load of the route: 144

Route for vehicle 28:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 667m
Load of the route: 184

Route for vehicle 29:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 892m
Load of the route: 178

Total distance of all routes: 29405m
Total load of all routes: 5147
[Finished in 1.047s]


--------------------------------------------------------------------------


Currently, the number of vehicles is just manually set to higher than the number of routes.
But since I won't know how many routes other VRPInstance solutions need, I'd like a way to keep the number of vehicles automatically higher.
For now, I can guarantee the number of vehicles being more than the number of routes by having at least one vehicle per node:

    num_vehicles = dim

And not printing the empty vehicle routes:

    if route_distance != 0:
        num_routes += 1
        plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index), route_load)
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        plan_output += 'Load of the route: {}\n'.format(route_load)
        print(plan_output)

Which prints the solution:
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 2115m
Load of the route: 205

Route for vehicle 75:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 1013m
Load of the route: 178

Route for vehicle 76:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 2225m
Load of the route: 202

Route for vehicle 77:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 1534m
Load of the route: 204

Route for vehicle 78:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1344m
Load of the route: 203

Route for vehicle 79:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 1315m
Load of the route: 196

Route for vehicle 80:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1456m
Load of the route: 201

Route for vehicle 81:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1205m
Load of the route: 196

Route for vehicle 82:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 1221m
Load of the route: 201

Route for vehicle 83:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 1240m
Load of the route: 206

Route for vehicle 84:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 1007m
Load of the route: 183

Route for vehicle 85:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 1139m
Load of the route: 185

Route for vehicle 86:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 1084m
Load of the route: 199

Route for vehicle 87:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 989m
Load of the route: 202

Route for vehicle 88:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 900m
Load of the route: 188

Route for vehicle 89:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 1364m
Load of the route: 203

Route for vehicle 90:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 838m
Load of the route: 205

Route for vehicle 91:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 845m
Load of the route: 200

Route for vehicle 92:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 807m
Load of the route: 191

Route for vehicle 93:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 841m
Load of the route: 199

Route for vehicle 94:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 1034m
Load of the route: 206

Route for vehicle 95:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 474m
Load of the route: 144

Route for vehicle 96:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 576m
Load of the route: 172

Route for vehicle 97:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 748m
Load of the route: 172

Route for vehicle 98:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 534m
Load of the route: 144

Route for vehicle 99:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 667m
Load of the route: 184

Route for vehicle 100:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 892m
Load of the route: 178

Total distance of all routes: 29405m
Total load of all routes: 5147
Total number of routes: 27
[Finished in 1.234s]

--------------------------------------------------------------------------


Now I want to solve a real-life weed problem.
I use BOPMid_full_matrix.txt, which in fact is a .vrp file.
I should change that.

Unlike other VRP instances, the BOPMid_full_matrix comes with a distance matrix of weighted arcs/edges.
So first, I need to modify VRPModeling to accept an arc distance input, instead of calculating the Euclidean distance based on node locations.
The calculation occurs in the Arc init, so I it to also accept a distance input:

    def __init__(self, origin, destination, distance=None):
        """
            distance (float): distance argument if passed through, otherwise Euclidean distance of the arc path, calculated by getDistance()
        """
        self.origin = origin
        self.destination = destination
        if distance is None:
            self.distance = self.get_distance()
        else:
            self.distance = distance

I also modify VRPInstance.add_node() to accept a distance input and pass it into Arc():

    def add_node(self, location, demand, arc_distances=None):
    .
    .
    if arc_distances is None:
              for existing_node in self.nodes:
                  # Arc will calculate distance using node locations
                  new_arc = Arc(existing_node, new_node)
                  new_arc_sym = Arc(new_node, existing_node)
                  self.arcs[new_arc.origin.id][new_arc.destination.id] = new_arc
                  self.arcs[new_arc.destination.id][new_arc.origin.id] = new_arc_sym
          else:  # arc_distances inputted
              for existing_node in self.nodes:
                  new_arc = Arc(existing_node, new_node, arc_distances[existing_node.id])
                  new_arc_sym = Arc(new_node, existing_node, arc_distances[existing_node.id])
                  # print(new_arc.__str__())
                  self.arcs[new_arc.origin.id][new_arc.destination.id] = new_arc
                  self.arcs[new_arc.destination.id][new_arc.origin.id] = new_arc_sym
    .
    .

Finally, I modify FileProcessor.import_from_vrp_file() to read files containing a distance matrix:

  # determine if there is a distance matrix included
      line = vrp_file.readline()
      is_weighted = False
      weighted_distances = []
      if line.startswith('EDGE_WEIGHT_SECTION'):
          is_weighted = True
          line = vrp_file.readline()  # skip depot line
          # Assumes symmetry
          for i in range(dimension - 1):
              line = vrp_file.readline()
              distances = line.split()[:i+1]
              # print(distances)
              weighted_distances.append(distances)

          line = vrp_file.readline()  # DEMAND_SECTION
          print(line)
      else:
          print(line)  # should print DEMAND_SECTION

When run:
--------------------------------------------------------------------------

NAME: BOPMid_full_matrix

TYPE: CVRP

COMMENT: Stands for "Birds Of Prey Mid-paddock", describing the drone-surveyed area at which said birds tried to take down survey drone. Located at Redlands Park, McKinlay, QLD, Australia. Collected by Tiria Andersen, see Honours Thesis.

DIMENSION: 647

CAPACITY: 80000

EDGE_WEIGHT_TYPE: EXPLICIT

EDGE_WEIGHT_FORMAT: FULL_MATRIX

NODE_COORD_TYPE: TWOD_COORDS

DEMAND_SECTION

name = BOPMid_full_matrix
Vehicle.capacity = 80000
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 647
arcs in instance: 417962
Total distance of all routes: 0m
Total load of all routes: 47020
Total number of routes: 0
[Finished in 3.851s]

--------------------------------------------------------------------------


It doesn't trigger any errors but or-tools find empty solutions, so something is wrong.
I need to test each of the changes in the sandbox, step by step.
But sandbox isn't running because its unhappy about relative imports, e.g. from .node import Node.

Based on this article, explicit relative imports should do what I want?
https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html

Pep8 says absolute import is preferred, so absolute it is.
https://www.python.org/dev/peps/pep-0008/#imports
For example, in depot.py:

    from VRPModeling.node import Node


This thread describes the exact problem I have, so I moved sandbox.py out of VRPModeling as suggested.
https://www.reddit.com/r/learnpython/comments/9euygm/tried_to_use_relative_imports_for_library_and/

This means that any 'main' script things, even testing things, should be run outside of VRPModeling.
I've modified sandbox:

    import VRPModeling
    from VRPModeling.depot import Depot
    depot1 = Depot(0, [0, 0])

But the commented out part of sandbox still has old imports which won't work.
Also, I changed the module names to lowercase as according to pep8, so VRPInstance -> vrp_instance.
Anyway, I run sandbox to import the weed problem:
--------------------------------------------------------------------------

NAME: BOPMid_full_matrix

TYPE: CVRP

COMMENT: Stands for "Birds Of Prey Mid-paddock", describing the drone-surveyed area at which said birds tried to take down survey drone. Located at Redlands Park, McKinlay, QLD, Australia. Collected by Tiria Andersen, see Honours Thesis.

DIMENSION: 647

CAPACITY: 80000

EDGE_WEIGHT_TYPE: EXPLICIT

EDGE_WEIGHT_FORMAT: FULL_MATRIX

NODE_COORD_TYPE: TWOD_COORDS

DEMAND_SECTION

name = BOPMid_full_matrix
Vehicle.capacity = 80000
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 647
arcs in instance: 417962
id    location    demand
0     [0, 0]      0
1     [124, 45]      100
2     [119, 61]      100
3     [87, 60]      50
4     [33, 95]      100
5     [35, 85]      100
6     [32, 81]      100
7     [30, 86]      100
8     [12, 61]      100
9     [16, 115]      100
10     [28, 123]      100
.
.
.
644     [602, 48]      100
645     [681, 410]      100
646     [365, 541]      100
origin -> destination
0 1 1362.13
0 2 1257.11
0 3 553.55
0 4 3740.56
0 5 3454.16
0 6 3542.03
0 7 3757.72
0 8 4107.11
0 9 5025.48
0 10 4834.06
0 11 6175.48
0 12 6556.24
0 13 6171.32
0 14 6117.77
.
.
.
0 639 18934.92
0 640 35716.86
0 641 36949.09
0 642 37523.36
0 643 0.0
0 644 0.0
0 645 36605.84
0 646 30021.17
1 0 1362.13
1 2 591.42
1 3 2010.66
1 4 5344.11
1 5 5057.72
1 6 5145.58
1 7 5361.27
1 8 5710.66
1 9 6629.04
1 10 6144.72
.
.
.
110 533 25444.57
110 534 31135.13
.
.
.
646 643 29317.01
646 644 29337.72
646 645 18250.97
[Finished in 8.871s]

--------------------------------------------------------------------------

Seems like it loads okay. So why is the solution 0m?

    print("Solver status: ", routing.status())

Will give us a solver status code according to
https://developers.google.com/optimization/routing/routing_options
Value	Description:
0	ROUTING_NOT_SOLVED: Problem not solved yet.
1	ROUTING_SUCCESS: Problem solved successfully.
2	ROUTING_FAIL: No solution found to the problem.
3	ROUTING_FAIL_TIMEOUT: Time limit reached before finding a solution.
4	ROUTING_INVALID: Model, model parameters, or flags are not valid.
--------------------------------------------------------------------------

Solver status:  1

--------------------------------------------------------------------------
So the solution definitely exists. Perhaps print_solution() is the problem.
I roll back print_solution() without the scaling, and make it print every route, even empty ones:

def print_solution(vrp_instance, num_vehicles, manager, routing, solution):
    """Prints solution on console."""
    total_distance = 0
    total_load = 0
    for vehicle_id in range(num_vehicles):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_distance = 0
        route_load = 0
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_load += vrp_instance.get_demands()[node_index]
            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
        plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index),
                                                 route_load)
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        plan_output += 'Load of the route: {}\n'.format(route_load)
        print(plan_output)
        total_distance += route_distance
        total_load += route_load
    print('Total distance of all routes: {}m'.format(total_distance))
    print('Total load of all routes: {}'.format(total_load))

Which gives the solution:
--------------------------------------------------------------------------

Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0
.
.
.
Route for vehicle 645:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 646:
 0 Load(0) ->  646 Load(100) ->  645 Load(200) ->  644 Load(300) ->  643 Load(350) ->  642 Load(400) ->  641 Load(450) ->  640 Load(500) ->  639 Load(550) ->  638 Load(600) ->  637 Load(700) ->  636 Load(750) ->  635 Load(850) ->  634 Load(950) ->  633 Load(1000) ->  632 Load(1100) ->  631 Load(1200) ->  630 Load(1300) ->  629 Load(1400) ->  628 Load(1500) ->  627 Load(1550) ->  626 Load(1650) ->  625 Load(1750) ->  624 Load(1850) ->  623 Load(1950) ->  622 Load(2050) ->  621 Load(2150) ->  620 Load(2250) ->  619 Load(2350) ->  618 Load(2400) ->  617 Load(2500) ->  616 Load(2550) ->  615 Load(2600) ->  614 Load(2650) ->  613 Load(2700) ->  612 Load(2750) ->  611 Load(2850) ->  610 Load(2900) ->  609 Load(2950) ->  608 Load(3000) ->  607 Load(3050) ->  606 Load(3100) ->  605 Load(3150) ->  604 Load(3200) ->  603 Load(3250) ->  602 Load(3280) ->  601 Load(3310) ->  600 Load(3410) ->  599 Load(3460) ->  598 Load(3510) ->  597 Load(3560) ->  596 Load(3610) ->  595 Load(3660) ->  594 Load(3710) ->  593 Load(3760) ->  592 Load(3810) ->  591 Load(3860) ->  590 Load(3910) ->  589 Load(4010) ->  588 Load(4110) ->  587 Load(4160) ->  586 Load(4210) ->  585 Load(4260) ->  584 Load(4310) ->  583 Load(4360) ->  582 Load(4410) ->  581 Load(4460) ->  580 Load(4510) ->  579 Load(4610) ->  578 Load(4710) ->  577 Load(4760) ->  576 Load(4860) ->  575 Load(4910) ->  574 Load(5010) ->  573 Load(5110) ->  572 Load(5160) ->  571 Load(5260) ->  570 Load(5310) ->  569 Load(5410) ->  568 Load(5460) ->  567 Load(5510) ->  566 Load(5610) ->  565 Load(5710) ->  564 Load(5760) ->  563 Load(5810) ->  562 Load(5860) ->  561 Load(5910) ->  560 Load(6010) ->  559 Load(6060) ->  558 Load(6110) ->  557 Load(6160) ->  556 Load(6210) ->  555 Load(6260) ->  554 Load(6310) ->  553 Load(6410) ->  552 Load(6460) ->  551 Load(6560) ->  550 Load(6660) ->  549 Load(6760) ->  548 Load(6810) ->  547 Load(6860) ->  546 Load(6910) ->  545 Load(7010) ->  544 Load(7040) ->  543 Load(7090) ->  542 Load(7140) ->  541 Load(7190) ->  540 Load(7240) ->  539 Load(7290) ->  538 Load(7340) ->  537 Load(7440) ->  536 Load(7490) ->  535 Load(7540) ->  534 Load(7590) ->  533 Load(7640) ->  532 Load(7740) ->  531 Load(7790) ->  530 Load(7840) ->  529 Load(7890) ->  528 Load(7990) ->  527 Load(8090) ->  526 Load(8140) ->  525 Load(8240) ->  524 Load(8340) ->  523 Load(8370) ->  522 Load(8470) ->  521 Load(8570) ->  520 Load(8620) ->  519 Load(8670) ->  518 Load(8720) ->  517 Load(8770) ->  516 Load(8820) ->  515 Load(8870) ->  514 Load(8970) ->  513 Load(9070) ->  512 Load(9100) ->  511 Load(9150) ->  510 Load(9200) ->  509 Load(9250) ->  508 Load(9300) ->  507 Load(9350) ->  506 Load(9400) ->  505 Load(9450) ->  504 Load(9500) ->  503 Load(9550) ->  502 Load(9600) ->  501 Load(9700) ->  500 Load(9750) ->  499 Load(9850) ->  498 Load(9900) ->  497 Load(9950) ->  496 Load(10000) ->  495 Load(10100) ->  494 Load(10200) ->  493 Load(10250) ->  492 Load(10300) ->  491 Load(10350) ->  490 Load(10450) ->  489 Load(10550) ->  488 Load(10650) ->  487 Load(10750) ->  486 Load(10850) ->  485 Load(10950) ->  484 Load(11050) ->  483 Load(11150) ->  482 Load(11250) ->  481 Load(11350) ->  480 Load(11450) ->  479 Load(11550) ->  478 Load(11650) ->  477 Load(11750) ->  476 Load(11850) ->  475 Load(11900) ->  474 Load(11950) ->  473 Load(12000) ->  472 Load(12050) ->  471 Load(12100) ->  470 Load(12150) ->  469 Load(12200) ->  468 Load(12250) ->  467 Load(12280) ->  466 Load(12330) ->  465 Load(12360) ->  464 Load(12410) ->  463 Load(12460) ->  462 Load(12490) ->  461 Load(12540) ->  460 Load(12640) ->  459 Load(12690) ->  458 Load(12740) ->  457 Load(12790) ->  456 Load(12840) ->  455 Load(12890) ->  454 Load(12940) ->  453 Load(12990) ->  452 Load(13090) ->  451 Load(13190) ->  450 Load(13240) ->  449 Load(13290) ->  448 Load(13340) ->  447 Load(13390) ->  446 Load(13440) ->  445 Load(13490) ->  444 Load(13540) ->  443 Load(13590) ->  442 Load(13620) ->  441 Load(13650) ->  440 Load(13700) ->  439 Load(13750) ->  438 Load(13800) ->  437 Load(13850) ->  436 Load(13900) ->  435 Load(13950) ->  434 Load(14000) ->  433 Load(14050) ->  432 Load(14100) ->  431 Load(14150) ->  430 Load(14200) ->  429 Load(14300) ->  428 Load(14400) ->  427 Load(14500) ->  426 Load(14550) ->  425 Load(14650) ->  424 Load(14750) ->  423 Load(14850) ->  422 Load(14900) ->  421 Load(14950) ->  420 Load(14980) ->  419 Load(15030) ->  418 Load(15080) ->  417 Load(15130) ->  416 Load(15180) ->  415 Load(15230) ->  414 Load(15280) ->  413 Load(15330) ->  412 Load(15380) ->  411 Load(15430) ->  410 Load(15480) ->  409 Load(15530) ->  408 Load(15630) ->  407 Load(15680) ->  406 Load(15730) ->  405 Load(15780) ->  404 Load(15830) ->  403 Load(15880) ->  402 Load(15930) ->  401 Load(15980) ->  400 Load(16080) ->  399 Load(16130) ->  398 Load(16230) ->  397 Load(16280) ->  396 Load(16380) ->  395 Load(16430) ->  394 Load(16530) ->  393 Load(16630) ->  392 Load(16730) ->  391 Load(16830) ->  390 Load(16930) ->  389 Load(17030) ->  388 Load(17130) ->  387 Load(17180) ->  386 Load(17230) ->  385 Load(17330) ->  384 Load(17380) ->  383 Load(17430) ->  382 Load(17480) ->  381 Load(17530) ->  380 Load(17630) ->  379 Load(17730) ->  378 Load(17830) ->  377 Load(17930) ->  376 Load(18030) ->  375 Load(18130) ->  374 Load(18230) ->  373 Load(18330) ->  372 Load(18380) ->  371 Load(18480) ->  370 Load(18580) ->  369 Load(18680) ->  368 Load(18780) ->  367 Load(18880) ->  366 Load(18980) ->  365 Load(19080) ->  364 Load(19180) ->  363 Load(19280) ->  362 Load(19380) ->  361 Load(19480) ->  360 Load(19580) ->  359 Load(19680) ->  358 Load(19780) ->  357 Load(19880) ->  356 Load(19980) ->  355 Load(20030) ->  354 Load(20080) ->  353 Load(20180) ->  352 Load(20230) ->  351 Load(20280) ->  350 Load(20330) ->  349 Load(20360) ->  348 Load(20460) ->  347 Load(20510) ->  346 Load(20560) ->  345 Load(20590) ->  344 Load(20690) ->  343 Load(20740) ->  342 Load(20790) ->  341 Load(20840) ->  340 Load(20940) ->  339 Load(21040) ->  338 Load(21140) ->  337 Load(21190) ->  336 Load(21240) ->  335 Load(21290) ->  334 Load(21340) ->  333 Load(21390) ->  332 Load(21440) ->  331 Load(21540) ->  330 Load(21640) ->  329 Load(21740) ->  328 Load(21790) ->  327 Load(21890) ->  326 Load(21990) ->  325 Load(22040) ->  324 Load(22090) ->  323 Load(22140) ->  322 Load(22190) ->  321 Load(22240) ->  320 Load(22340) ->  319 Load(22390) ->  318 Load(22440) ->  317 Load(22490) ->  316 Load(22540) ->  315 Load(22640) ->  314 Load(22690) ->  313 Load(22740) ->  312 Load(22790) ->  311 Load(22890) ->  310 Load(22990) ->  309 Load(23040) ->  308 Load(23140) ->  307 Load(23190) ->  306 Load(23240) ->  305 Load(23340) ->  304 Load(23440) ->  303 Load(23540) ->  302 Load(23640) ->  301 Load(23670) ->  300 Load(23770) ->  299 Load(23870) ->  298 Load(23970) ->  297 Load(24070) ->  296 Load(24120) ->  295 Load(24150) ->  294 Load(24200) ->  293 Load(24250) ->  292 Load(24280) ->  291 Load(24310) ->  290 Load(24360) ->  289 Load(24460) ->  288 Load(24560) ->  287 Load(24660) ->  286 Load(24760) ->  285 Load(24860) ->  284 Load(24960) ->  283 Load(25060) ->  282 Load(25160) ->  281 Load(25260) ->  280 Load(25360) ->  279 Load(25460) ->  278 Load(25560) ->  277 Load(25660) ->  276 Load(25760) ->  275 Load(25860) ->  274 Load(25910) ->  273 Load(26010) ->  272 Load(26060) ->  271 Load(26110) ->  270 Load(26160) ->  269 Load(26260) ->  268 Load(26360) ->  267 Load(26460) ->  266 Load(26560) ->  265 Load(26660) ->  264 Load(26760) ->  263 Load(26860) ->  262 Load(26960) ->  261 Load(27060) ->  260 Load(27160) ->  259 Load(27260) ->  258 Load(27310) ->  257 Load(27410) ->  256 Load(27510) ->  255 Load(27610) ->  254 Load(27710) ->  253 Load(27810) ->  252 Load(27910) ->  251 Load(28010) ->  250 Load(28110) ->  249 Load(28210) ->  248 Load(28310) ->  247 Load(28410) ->  246 Load(28460) ->  245 Load(28560) ->  244 Load(28660) ->  243 Load(28760) ->  242 Load(28860) ->  241 Load(28960) ->  240 Load(29060) ->  239 Load(29110) ->  238 Load(29160) ->  237 Load(29210) ->  236 Load(29260) ->  235 Load(29310) ->  234 Load(29410) ->  233 Load(29510) ->  232 Load(29610) ->  231 Load(29710) ->  230 Load(29810) ->  229 Load(29910) ->  228 Load(30010) ->  227 Load(30060) ->  226 Load(30160) ->  225 Load(30260) ->  224 Load(30360) ->  223 Load(30410) ->  222 Load(30510) ->  221 Load(30610) ->  220 Load(30710) ->  219 Load(30760) ->  218 Load(30860) ->  217 Load(30960) ->  216 Load(31010) ->  215 Load(31060) ->  214 Load(31160) ->  213 Load(31260) ->  212 Load(31310) ->  211 Load(31410) ->  210 Load(31510) ->  209 Load(31610) ->  208 Load(31710) ->  207 Load(31810) ->  206 Load(31910) ->  205 Load(32010) ->  204 Load(32110) ->  203 Load(32210) ->  202 Load(32310) ->  201 Load(32410) ->  200 Load(32510) ->  199 Load(32560) ->  198 Load(32610) ->  197 Load(32710) ->  196 Load(32810) ->  195 Load(32910) ->  194 Load(32960) ->  193 Load(33010) ->  192 Load(33060) ->  191 Load(33160) ->  190 Load(33260) ->  189 Load(33360) ->  188 Load(33460) ->  187 Load(33560) ->  186 Load(33660) ->  185 Load(33760) ->  184 Load(33860) ->  183 Load(33910) ->  182 Load(34010) ->  181 Load(34060) ->  180 Load(34110) ->  179 Load(34160) ->  178 Load(34210) ->  177 Load(34260) ->  176 Load(34310) ->  175 Load(34360) ->  174 Load(34410) ->  173 Load(34510) ->  172 Load(34610) ->  171 Load(34710) ->  170 Load(34760) ->  169 Load(34860) ->  168 Load(34960) ->  167 Load(35060) ->  166 Load(35160) ->  165 Load(35210) ->  164 Load(35260) ->  163 Load(35310) ->  162 Load(35360) ->  161 Load(35410) ->  160 Load(35460) ->  159 Load(35510) ->  158 Load(35560) ->  157 Load(35660) ->  156 Load(35710) ->  155 Load(35810) ->  154 Load(35860) ->  153 Load(35960) ->  152 Load(36060) ->  151 Load(36160) ->  150 Load(36260) ->  149 Load(36310) ->  148 Load(36410) ->  147 Load(36510) ->  146 Load(36610) ->  145 Load(36710) ->  144 Load(36810) ->  143 Load(36910) ->  142 Load(37010) ->  141 Load(37110) ->  140 Load(37210) ->  139 Load(37310) ->  138 Load(37340) ->  137 Load(37390) ->  136 Load(37490) ->  135 Load(37540) ->  134 Load(37590) ->  133 Load(37640) ->  132 Load(37690) ->  131 Load(37790) ->  130 Load(37840) ->  129 Load(37940) ->  128 Load(37990) ->  127 Load(38040) ->  126 Load(38090) ->  125 Load(38140) ->  124 Load(38190) ->  123 Load(38240) ->  122 Load(38290) ->  121 Load(38340) ->  120 Load(38390) ->  119 Load(38490) ->  118 Load(38590) ->  117 Load(38640) ->  116 Load(38740) ->  115 Load(38840) ->  114 Load(38940) ->  113 Load(39040) ->  112 Load(39140) ->  111 Load(39240) ->  110 Load(39340) ->  109 Load(39390) ->  108 Load(39440) ->  107 Load(39490) ->  106 Load(39540) ->  105 Load(39590) ->  104 Load(39640) ->  103 Load(39690) ->  102 Load(39740) ->  101 Load(39790) ->  100 Load(39840) ->  99 Load(39940) ->  98 Load(40040) ->  97 Load(40140) ->  96 Load(40190) ->  95 Load(40290) ->  94 Load(40340) ->  93 Load(40440) ->  92 Load(40490) ->  91 Load(40590) ->  90 Load(40640) ->  89 Load(40690) ->  88 Load(40790) ->  87 Load(40890) ->  86 Load(40940) ->  85 Load(41040) ->  84 Load(41140) ->  83 Load(41190) ->  82 Load(41240) ->  81 Load(41340) ->  80 Load(41440) ->  79 Load(41540) ->  78 Load(41640) ->  77 Load(41740) ->  76 Load(41840) ->  75 Load(41940) ->  74 Load(41990) ->  73 Load(42040) ->  72 Load(42140) ->  71 Load(42190) ->  70 Load(42240) ->  69 Load(42290) ->  68 Load(42340) ->  67 Load(42390) ->  66 Load(42440) ->  65 Load(42490) ->  64 Load(42520) ->  63 Load(42570) ->  62 Load(42620) ->  61 Load(42670) ->  60 Load(42720) ->  59 Load(42770) ->  58 Load(42820) ->  57 Load(42870) ->  56 Load(42920) ->  55 Load(43020) ->  54 Load(43070) ->  53 Load(43120) ->  52 Load(43170) ->  51 Load(43220) ->  50 Load(43270) ->  49 Load(43320) ->  48 Load(43370) ->  47 Load(43420) ->  46 Load(43470) ->  45 Load(43520) ->  44 Load(43570) ->  43 Load(43620) ->  42 Load(43670) ->  41 Load(43720) ->  40 Load(43770) ->  39 Load(43820) ->  38 Load(43920) ->  37 Load(43970) ->  36 Load(44020) ->  35 Load(44120) ->  34 Load(44170) ->  33 Load(44220) ->  32 Load(44320) ->  31 Load(44370) ->  30 Load(44420) ->  29 Load(44470) ->  28 Load(44520) ->  27 Load(44620) ->  26 Load(44720) ->  25 Load(44820) ->  24 Load(44920) ->  23 Load(45020) ->  22 Load(45120) ->  21 Load(45220) ->  20 Load(45270) ->  19 Load(45370) ->  18 Load(45470) ->  17 Load(45520) ->  16 Load(45570) ->  15 Load(45670) ->  14 Load(45770) ->  13 Load(45870) ->  12 Load(45970) ->  11 Load(46070) ->  10 Load(46170) ->  9 Load(46270) ->  8 Load(46370) ->  7 Load(46470) ->  6 Load(46570) ->  5 Load(46670) ->  4 Load(46770) ->  3 Load(46820) ->  2 Load(46920) ->  1 Load(47020) ->  0 Load(47020)
Distance of the route: 0m
Load of the route: 47020

Total distance of all routes: 0m
Total load of all routes: 47020

--------------------------------------------------------------------------


No wonder print_solution() didn't sprint any routes - there is only one route, and the distance for it is 0m.
Vehicle capacity is 80000, but the total load is 47020, so naturally it all got stuck in one route.
I think there is a good reason for capacity being 80000, so I'll manually change it in the main of external_data_routing.py as opposed to BOPMid_full_matrix.txt itself.
I'm going to pick an arbitrary number - let's say 10000:

    vehicle_capacity = 10000

 That should give us about 5 routes:

--------------------------------------------------------------------------

 Route for vehicle 641:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 642:
 0 Load(0) ->  98 Load(100) ->  97 Load(200) ->  96 Load(250) ->  95 Load(350) ->  94 Load(400) ->  93 Load(500) ->  92 Load(550) ->  91 Load(650) ->  90 Load(700) ->  89 Load(750) ->  88 Load(850) ->  87 Load(950) ->  86 Load(1000) ->  85 Load(1100) ->  84 Load(1200) ->  83 Load(1250) ->  82 Load(1300) ->  81 Load(1400) ->  80 Load(1500) ->  79 Load(1600) ->  78 Load(1700) ->  77 Load(1800) ->  76 Load(1900) ->  75 Load(2000) ->  74 Load(2050) ->  73 Load(2100) ->  72 Load(2200) ->  71 Load(2250) ->  70 Load(2300) ->  69 Load(2350) ->  68 Load(2400) ->  67 Load(2450) ->  66 Load(2500) ->  65 Load(2550) ->  64 Load(2580) ->  63 Load(2630) ->  62 Load(2680) ->  61 Load(2730) ->  60 Load(2780) ->  59 Load(2830) ->  58 Load(2880) ->  57 Load(2930) ->  56 Load(2980) ->  55 Load(3080) ->  54 Load(3130) ->  53 Load(3180) ->  52 Load(3230) ->  51 Load(3280) ->  50 Load(3330) ->  49 Load(3380) ->  48 Load(3430) ->  47 Load(3480) ->  46 Load(3530) ->  45 Load(3580) ->  44 Load(3630) ->  43 Load(3680) ->  42 Load(3730) ->  41 Load(3780) ->  40 Load(3830) ->  39 Load(3880) ->  38 Load(3980) ->  37 Load(4030) ->  36 Load(4080) ->  35 Load(4180) ->  34 Load(4230) ->  33 Load(4280) ->  32 Load(4380) ->  31 Load(4430) ->  30 Load(4480) ->  29 Load(4530) ->  28 Load(4580) ->  27 Load(4680) ->  26 Load(4780) ->  25 Load(4880) ->  24 Load(4980) ->  23 Load(5080) ->  22 Load(5180) ->  21 Load(5280) ->  20 Load(5330) ->  19 Load(5430) ->  18 Load(5530) ->  17 Load(5580) ->  16 Load(5630) ->  15 Load(5730) ->  14 Load(5830) ->  13 Load(5930) ->  12 Load(6030) ->  11 Load(6130) ->  10 Load(6230) ->  9 Load(6330) ->  8 Load(6430) ->  7 Load(6530) ->  6 Load(6630) ->  5 Load(6730) ->  4 Load(6830) ->  3 Load(6880) ->  2 Load(6980) ->  1 Load(7080) ->  0 Load(7080)
Distance of the route: 0m
Load of the route: 7080

Route for vehicle 643:
 0 Load(0) ->  228 Load(100) ->  226 Load(200) ->  225 Load(300) ->  224 Load(400) ->  223 Load(450) ->  222 Load(550) ->  221 Load(650) ->  220 Load(750) ->  219 Load(800) ->  218 Load(900) ->  217 Load(1000) ->  216 Load(1050) ->  215 Load(1100) ->  214 Load(1200) ->  213 Load(1300) ->  212 Load(1350) ->  211 Load(1450) ->  210 Load(1550) ->  209 Load(1650) ->  208 Load(1750) ->  207 Load(1850) ->  206 Load(1950) ->  205 Load(2050) ->  204 Load(2150) ->  203 Load(2250) ->  202 Load(2350) ->  201 Load(2450) ->  200 Load(2550) ->  199 Load(2600) ->  198 Load(2650) ->  197 Load(2750) ->  196 Load(2850) ->  195 Load(2950) ->  194 Load(3000) ->  193 Load(3050) ->  192 Load(3100) ->  191 Load(3200) ->  190 Load(3300) ->  189 Load(3400) ->  188 Load(3500) ->  187 Load(3600) ->  186 Load(3700) ->  185 Load(3800) ->  184 Load(3900) ->  183 Load(3950) ->  182 Load(4050) ->  181 Load(4100) ->  180 Load(4150) ->  179 Load(4200) ->  178 Load(4250) ->  177 Load(4300) ->  176 Load(4350) ->  175 Load(4400) ->  174 Load(4450) ->  173 Load(4550) ->  172 Load(4650) ->  171 Load(4750) ->  170 Load(4800) ->  169 Load(4900) ->  168 Load(5000) ->  167 Load(5100) ->  166 Load(5200) ->  165 Load(5250) ->  164 Load(5300) ->  163 Load(5350) ->  162 Load(5400) ->  161 Load(5450) ->  160 Load(5500) ->  159 Load(5550) ->  158 Load(5600) ->  157 Load(5700) ->  156 Load(5750) ->  155 Load(5850) ->  154 Load(5900) ->  153 Load(6000) ->  152 Load(6100) ->  151 Load(6200) ->  150 Load(6300) ->  149 Load(6350) ->  148 Load(6450) ->  147 Load(6550) ->  146 Load(6650) ->  145 Load(6750) ->  144 Load(6850) ->  143 Load(6950) ->  142 Load(7050) ->  141 Load(7150) ->  140 Load(7250) ->  139 Load(7350) ->  138 Load(7380) ->  137 Load(7430) ->  136 Load(7530) ->  135 Load(7580) ->  134 Load(7630) ->  133 Load(7680) ->  132 Load(7730) ->  131 Load(7830) ->  130 Load(7880) ->  129 Load(7980) ->  128 Load(8030) ->  127 Load(8080) ->  126 Load(8130) ->  125 Load(8180) ->  124 Load(8230) ->  123 Load(8280) ->  122 Load(8330) ->  121 Load(8380) ->  120 Load(8430) ->  119 Load(8530) ->  118 Load(8630) ->  117 Load(8680) ->  116 Load(8780) ->  115 Load(8880) ->  114 Load(8980) ->  113 Load(9080) ->  112 Load(9180) ->  111 Load(9280) ->  110 Load(9380) ->  109 Load(9430) ->  108 Load(9480) ->  107 Load(9530) ->  106 Load(9580) ->  105 Load(9630) ->  104 Load(9680) ->  103 Load(9730) ->  102 Load(9780) ->  101 Load(9830) ->  100 Load(9880) ->  99 Load(9980) ->  0 Load(9980)
Distance of the route: 0m
Load of the route: 9980

Route for vehicle 644:
 0 Load(0) ->  355 Load(50) ->  354 Load(100) ->  353 Load(200) ->  352 Load(250) ->  351 Load(300) ->  350 Load(350) ->  349 Load(380) ->  348 Load(480) ->  347 Load(530) ->  346 Load(580) ->  345 Load(610) ->  344 Load(710) ->  343 Load(760) ->  342 Load(810) ->  341 Load(860) ->  340 Load(960) ->  339 Load(1060) ->  338 Load(1160) ->  337 Load(1210) ->  336 Load(1260) ->  335 Load(1310) ->  334 Load(1360) ->  333 Load(1410) ->  332 Load(1460) ->  331 Load(1560) ->  330 Load(1660) ->  329 Load(1760) ->  328 Load(1810) ->  327 Load(1910) ->  326 Load(2010) ->  325 Load(2060) ->  324 Load(2110) ->  323 Load(2160) ->  322 Load(2210) ->  321 Load(2260) ->  320 Load(2360) ->  319 Load(2410) ->  318 Load(2460) ->  317 Load(2510) ->  316 Load(2560) ->  315 Load(2660) ->  314 Load(2710) ->  313 Load(2760) ->  312 Load(2810) ->  311 Load(2910) ->  310 Load(3010) ->  309 Load(3060) ->  308 Load(3160) ->  307 Load(3210) ->  306 Load(3260) ->  305 Load(3360) ->  304 Load(3460) ->  303 Load(3560) ->  302 Load(3660) ->  301 Load(3690) ->  300 Load(3790) ->  299 Load(3890) ->  298 Load(3990) ->  297 Load(4090) ->  296 Load(4140) ->  295 Load(4170) ->  294 Load(4220) ->  293 Load(4270) ->  292 Load(4300) ->  291 Load(4330) ->  290 Load(4380) ->  289 Load(4480) ->  288 Load(4580) ->  287 Load(4680) ->  286 Load(4780) ->  285 Load(4880) ->  284 Load(4980) ->  283 Load(5080) ->  282 Load(5180) ->  281 Load(5280) ->  280 Load(5380) ->  279 Load(5480) ->  278 Load(5580) ->  277 Load(5680) ->  276 Load(5780) ->  275 Load(5880) ->  274 Load(5930) ->  273 Load(6030) ->  272 Load(6080) ->  271 Load(6130) ->  270 Load(6180) ->  269 Load(6280) ->  268 Load(6380) ->  267 Load(6480) ->  266 Load(6580) ->  265 Load(6680) ->  264 Load(6780) ->  263 Load(6880) ->  262 Load(6980) ->  261 Load(7080) ->  260 Load(7180) ->  259 Load(7280) ->  258 Load(7330) ->  257 Load(7430) ->  256 Load(7530) ->  255 Load(7630) ->  254 Load(7730) ->  253 Load(7830) ->  252 Load(7930) ->  251 Load(8030) ->  250 Load(8130) ->  249 Load(8230) ->  248 Load(8330) ->  247 Load(8430) ->  246 Load(8480) ->  245 Load(8580) ->  244 Load(8680) ->  243 Load(8780) ->  242 Load(8880) ->  241 Load(8980) ->  240 Load(9080) ->  239 Load(9130) ->  238 Load(9180) ->  237 Load(9230) ->  236 Load(9280) ->  235 Load(9330) ->  234 Load(9430) ->  233 Load(9530) ->  232 Load(9630) ->  231 Load(9730) ->  230 Load(9830) ->  229 Load(9930) ->  227 Load(9980) ->  0 Load(9980)
Distance of the route: 0m
Load of the route: 9980

Route for vehicle 645:
 0 Load(0) ->  495 Load(100) ->  494 Load(200) ->  493 Load(250) ->  492 Load(300) ->  491 Load(350) ->  490 Load(450) ->  489 Load(550) ->  488 Load(650) ->  487 Load(750) ->  486 Load(850) ->  485 Load(950) ->  484 Load(1050) ->  483 Load(1150) ->  482 Load(1250) ->  481 Load(1350) ->  480 Load(1450) ->  479 Load(1550) ->  478 Load(1650) ->  477 Load(1750) ->  476 Load(1850) ->  475 Load(1900) ->  474 Load(1950) ->  473 Load(2000) ->  472 Load(2050) ->  471 Load(2100) ->  470 Load(2150) ->  469 Load(2200) ->  468 Load(2250) ->  467 Load(2280) ->  466 Load(2330) ->  465 Load(2360) ->  464 Load(2410) ->  463 Load(2460) ->  462 Load(2490) ->  461 Load(2540) ->  460 Load(2640) ->  459 Load(2690) ->  458 Load(2740) ->  457 Load(2790) ->  456 Load(2840) ->  455 Load(2890) ->  454 Load(2940) ->  453 Load(2990) ->  452 Load(3090) ->  451 Load(3190) ->  450 Load(3240) ->  449 Load(3290) ->  448 Load(3340) ->  447 Load(3390) ->  446 Load(3440) ->  445 Load(3490) ->  444 Load(3540) ->  443 Load(3590) ->  442 Load(3620) ->  441 Load(3650) ->  440 Load(3700) ->  439 Load(3750) ->  438 Load(3800) ->  437 Load(3850) ->  436 Load(3900) ->  435 Load(3950) ->  434 Load(4000) ->  433 Load(4050) ->  432 Load(4100) ->  431 Load(4150) ->  430 Load(4200) ->  429 Load(4300) ->  428 Load(4400) ->  427 Load(4500) ->  426 Load(4550) ->  425 Load(4650) ->  424 Load(4750) ->  423 Load(4850) ->  422 Load(4900) ->  421 Load(4950) ->  420 Load(4980) ->  419 Load(5030) ->  418 Load(5080) ->  417 Load(5130) ->  416 Load(5180) ->  415 Load(5230) ->  414 Load(5280) ->  413 Load(5330) ->  412 Load(5380) ->  411 Load(5430) ->  410 Load(5480) ->  409 Load(5530) ->  408 Load(5630) ->  407 Load(5680) ->  406 Load(5730) ->  405 Load(5780) ->  404 Load(5830) ->  403 Load(5880) ->  402 Load(5930) ->  401 Load(5980) ->  400 Load(6080) ->  399 Load(6130) ->  398 Load(6230) ->  397 Load(6280) ->  396 Load(6380) ->  395 Load(6430) ->  394 Load(6530) ->  393 Load(6630) ->  392 Load(6730) ->  391 Load(6830) ->  390 Load(6930) ->  389 Load(7030) ->  388 Load(7130) ->  387 Load(7180) ->  386 Load(7230) ->  385 Load(7330) ->  384 Load(7380) ->  383 Load(7430) ->  382 Load(7480) ->  381 Load(7530) ->  380 Load(7630) ->  379 Load(7730) ->  378 Load(7830) ->  377 Load(7930) ->  376 Load(8030) ->  375 Load(8130) ->  374 Load(8230) ->  373 Load(8330) ->  372 Load(8380) ->  371 Load(8480) ->  370 Load(8580) ->  369 Load(8680) ->  368 Load(8780) ->  367 Load(8880) ->  366 Load(8980) ->  365 Load(9080) ->  364 Load(9180) ->  363 Load(9280) ->  362 Load(9380) ->  361 Load(9480) ->  360 Load(9580) ->  359 Load(9680) ->  358 Load(9780) ->  357 Load(9880) ->  356 Load(9980) ->  0 Load(9980)
Distance of the route: 0m
Load of the route: 9980

Route for vehicle 646:
 0 Load(0) ->  646 Load(100) ->  645 Load(200) ->  644 Load(300) ->  643 Load(350) ->  642 Load(400) ->  641 Load(450) ->  640 Load(500) ->  639 Load(550) ->  638 Load(600) ->  637 Load(700) ->  636 Load(750) ->  635 Load(850) ->  634 Load(950) ->  633 Load(1000) ->  632 Load(1100) ->  631 Load(1200) ->  630 Load(1300) ->  629 Load(1400) ->  628 Load(1500) ->  627 Load(1550) ->  626 Load(1650) ->  625 Load(1750) ->  624 Load(1850) ->  623 Load(1950) ->  622 Load(2050) ->  621 Load(2150) ->  620 Load(2250) ->  619 Load(2350) ->  618 Load(2400) ->  617 Load(2500) ->  616 Load(2550) ->  615 Load(2600) ->  614 Load(2650) ->  613 Load(2700) ->  612 Load(2750) ->  611 Load(2850) ->  610 Load(2900) ->  609 Load(2950) ->  608 Load(3000) ->  607 Load(3050) ->  606 Load(3100) ->  605 Load(3150) ->  604 Load(3200) ->  603 Load(3250) ->  602 Load(3280) ->  601 Load(3310) ->  600 Load(3410) ->  599 Load(3460) ->  598 Load(3510) ->  597 Load(3560) ->  596 Load(3610) ->  595 Load(3660) ->  594 Load(3710) ->  593 Load(3760) ->  592 Load(3810) ->  591 Load(3860) ->  590 Load(3910) ->  589 Load(4010) ->  588 Load(4110) ->  587 Load(4160) ->  586 Load(4210) ->  585 Load(4260) ->  584 Load(4310) ->  583 Load(4360) ->  582 Load(4410) ->  581 Load(4460) ->  580 Load(4510) ->  579 Load(4610) ->  578 Load(4710) ->  577 Load(4760) ->  576 Load(4860) ->  575 Load(4910) ->  574 Load(5010) ->  573 Load(5110) ->  572 Load(5160) ->  571 Load(5260) ->  570 Load(5310) ->  569 Load(5410) ->  568 Load(5460) ->  567 Load(5510) ->  566 Load(5610) ->  565 Load(5710) ->  564 Load(5760) ->  563 Load(5810) ->  562 Load(5860) ->  561 Load(5910) ->  560 Load(6010) ->  559 Load(6060) ->  558 Load(6110) ->  557 Load(6160) ->  556 Load(6210) ->  555 Load(6260) ->  554 Load(6310) ->  553 Load(6410) ->  552 Load(6460) ->  551 Load(6560) ->  550 Load(6660) ->  549 Load(6760) ->  548 Load(6810) ->  547 Load(6860) ->  546 Load(6910) ->  545 Load(7010) ->  544 Load(7040) ->  543 Load(7090) ->  542 Load(7140) ->  541 Load(7190) ->  540 Load(7240) ->  539 Load(7290) ->  538 Load(7340) ->  537 Load(7440) ->  536 Load(7490) ->  535 Load(7540) ->  534 Load(7590) ->  533 Load(7640) ->  532 Load(7740) ->  531 Load(7790) ->  530 Load(7840) ->  529 Load(7890) ->  528 Load(7990) ->  527 Load(8090) ->  526 Load(8140) ->  525 Load(8240) ->  524 Load(8340) ->  523 Load(8370) ->  522 Load(8470) ->  521 Load(8570) ->  520 Load(8620) ->  519 Load(8670) ->  518 Load(8720) ->  517 Load(8770) ->  516 Load(8820) ->  515 Load(8870) ->  514 Load(8970) ->  513 Load(9070) ->  512 Load(9100) ->  511 Load(9150) ->  510 Load(9200) ->  509 Load(9250) ->  508 Load(9300) ->  507 Load(9350) ->  506 Load(9400) ->  505 Load(9450) ->  504 Load(9500) ->  503 Load(9550) ->  502 Load(9600) ->  501 Load(9700) ->  500 Load(9750) ->  499 Load(9850) ->  498 Load(9900) ->  497 Load(9950) ->  496 Load(10000) ->  0 Load(10000)
Distance of the route: 0m
Load of the route: 10000

Total distance of all routes: 0m
Total load of all routes: 47020
[Finished in 5.122s]

--------------------------------------------------------------------------

Yup, or-tools is splitting up the routes properly, but still not showing the distances.

Last time there was this issue, it was because the distance callback weren't feeding zeroes as the distance between a node & itself.
But I haven't modified the distance_callback() since then!
The distance_callback pulls distances directly from vrp_instance.arcs.
arcs seems to load up fine, though.

Let's have a look at what values the distance callback is passing:

def distance_callback(from_index, to_index):
      from_node = manager.IndexToNode(from_index)
      to_node = manager.IndexToNode(to_index)
      if from_node == to_node:
          distance = 0
          print("from_node = to_node, distance 0")
      else:
          distance = (vrp_instance.arcs[from_node][to_node]).distance
          distance = round(distance * 1000)
          print("extracted from arcs, distance" + distance)

      return distance

It should be all arc values.
--------------------------------------------------------------------------

name = BOPMid_full_matrix
Vehicle.capacity = 80000
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 647
arcs in instance: 417962
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
.
.
.
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
Solver status:  1

--------------------------------------------------------------------------


Uh-oh. All zeros.
Is from_node == to_node ??

Let's load up a different vrp instance to check if this is expected behaviour:

    vrp_instance = import_vrp_instance_from_file("C:/Users/jc321076/github/VRPModeling/Andersen_n8.vrp")

Now:
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.capacity = 30
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
from_node = to_node, distance 0
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
Distance of the route: 0m
Load of the route: 30

Route for vehicle 4:
 0 Load(0) ->  4 Load(20) ->  0 Load(20)
Distance of the route: 0m
Load of the route: 20

Route for vehicle 5:
 0 Load(0) ->  5 Load(25) ->  1 Load(30) ->  0 Load(30)
Distance of the route: 0m
Load of the route: 30

Total distance of all routes: 0m
Total load of all routes: 80
[Finished in 0.422s]

--------------------------------------------------------------------------


Huh. Same behaviour. Not good.
Why are they different?
The names, dimensions, node locations and demands are loading up fine.
Just the arc distances are playing up.
I suspect FileProcessor.import_from_vrp_file().

    if line.startswith('EDGE_WEIGHT_SECTION'):
        print("EDGE_WEIGHT_SECTION true")

Okay, it didn't print, so the next area of suspect is:
    if is_weighted:
        print(weighted_distances)
        for i in range(dimension - 1):
            # print("i val: ", i)
            # print(nodes_coords[i], demands[i], weighted_distances[i])
            vrp_instance.add_node(nodes_coords[i], demands[i], weighted_distances[i])
    else:
        print("is_weighted is false")
        for i in range(dimension - 1):
            vrp_instance.add_node(nodes_coords[i], demands[i])

Okay, it did print "is_weighted is false".
The next section of suspect is vrp_instance.add_node():

    if arc_distances is None:
              print("arc creation reached")
              for existing_node in self.nodes:
                  # Arc will calculate distance using node locations
                  new_arc = Arc(existing_node, new_node)
                  new_arc_sym = Arc(new_node, existing_node)
                  self.arcs[new_arc.origin.id][new_arc.destination.id] = new_arc
                  self.arcs[new_arc.destination.id][new_arc.origin.id] = new_arc_sym
    else:  # arc_distances inputted
        for existing_node in self.nodes:
            new_arc = Arc(existing_node, new_node, arc_distances[existing_node.id])
            new_arc_sym = Arc(new_node, existing_node, arc_distances[existing_node.id])
            # print(new_arc.__str__())
            self.arcs[new_arc.origin.id][new_arc.destination.id] = new_arc
            self.arcs[new_arc.destination.id][new_arc.origin.id] = new_arc_sym

Okay, it printed "arc creation reached" five times, as expected.
The next section of suspect is Arc() itself:

    def __init__(self, origin, destination, distance=None):
        self.origin = origin
        self.destination = destination
        if distance is None:
            print("distance is indeed None")
            self.distance = self.get_distance()
        else:
            self.distance = distance

Okay, it printed "distance is indeed None" appropriately....
Let's look at the distance matrix stored using vrp_instance.get_distance_matrix():

    def get_distance_matrix(self):
        """ DEBUG: Creates a numpy array representing a matrix of arc distances.
        """
        dim = len(self.nodes)
        distance_matrix = np.zeros((dim, dim))

        for origin_id, lvl2_dict in self.arcs.items():
            for destination_id, arc in lvl2_dict.items():
                arc = self.arcs[origin_id][destination_id]
                distance_matrix[origin_id][destination_id] = arc.distance
        return distance_matrix

And the output:
--------------------------------------------------------------------------

id    location    demand
0     [0, 0]      0
1     [5, 13]      5
2     [9, 4]      15
3     [1, 0]      15
4     [8, 3]      20
5     [4, 10]      25
[[ 0.         13.92838828  9.8488578   1.          8.54400375 10.77032961]
 [13.92838828  0.          9.8488578  13.60147051 10.44030651  3.16227766]
 [ 9.8488578   9.8488578   0.          8.94427191  1.41421356  7.81024968]
 [ 1.         13.60147051  8.94427191  0.          7.61577311 10.44030651]
 [ 8.54400375 10.44030651  1.41421356  7.61577311  0.          8.06225775]
 [10.77032961  3.16227766  7.81024968 10.44030651  8.06225775  0.        ]]

--------------------------------------------------------------------------

I double checked distances using an online distance calculator:
https://www.calculatorsoup.com/calculators/geometry-plane/distance-two-points.php
And the distances were correct for several points, so I'm assuming they are correct for all of them.

I think the distances in vrp_instance.arcs are stored correctly, so the next section of suspect is distance_callback() in external_data_routing.py

I'm changing the distance callback to pull distances from get_distance_matrix():

    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        print("from_node -> to_node: {} -> {} ".format(from_node, to_node))
        return vrp_instance.get_distance_matrix()[from_node][to_node]

Which gives:
--------------------------------------------------------------------------
from_node -> to_node: 0 -> 0
from_node -> to_node: 0 -> 0
from_node -> to_node: 0 -> 0
from_node -> to_node: 0 -> 0
from_node -> to_node: 0 -> 0
from_node -> to_node: 1 -> 0
.
.
from_node -> to_node: 5 -> 3
from_node -> to_node: 2 -> 1
.
.
from_node -> to_node: 0 -> 3
from_node -> to_node: 2 -> 0
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

from_node -> to_node: 0 -> 1
from_node -> to_node: 1 -> 5
from_node -> to_node: 5 -> 0
Route for vehicle 3:
 0 Load(0) ->  1 Load(5) ->  5 Load(30) ->  0 Load(30)
Distance of the route: 26m
Load of the route: 30

from_node -> to_node: 0 -> 4
from_node -> to_node: 4 -> 0
Route for vehicle 4:
 0 Load(0) ->  4 Load(20) ->  0 Load(20)
Distance of the route: 16m
Load of the route: 20

from_node -> to_node: 0 -> 3
from_node -> to_node: 3 -> 2
from_node -> to_node: 2 -> 0
Route for vehicle 5:
 0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
Distance of the route: 18m
Load of the route: 30

Total distance of all routes: 60m
Total load of all routes: 80
[Finished in 0.463s]

--------------------------------------------------------------------------

Yes! It worked! So there must be something wrong with how distance_callback() extracted distances from vrp_instance.arcs
But it worked before, so why now?

Anyway let's come back to the whys later. I want to get the weed problem solved.
I'll let the distance callback get its distances from get_distance_matrix() for now.
To ensure it doesn't take too long, I set ortools to stop after finding one solution:

    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.set_solution_limit = 1

This should give a solution fairly quickly.
--------------------------------------------------------------------------

C:\Users\jc321076\github>
 python external_data_routing.py
NAME: BOPMid_full_matrix

TYPE: CVRP

COMMENT: Stands for "Birds Of Prey Mid-paddock", describing the drone-surveyed area at which said birds tried to take down survey drone. Located at Redlands Park, McKinlay, QLD, Australia. Collected by Tiria Andersen, see Honours Thesis.

DIMENSION: 647

CAPACITY: 80000

EDGE_WEIGHT_TYPE: EXPLICIT

EDGE_WEIGHT_FORMAT: FULL_MATRIX

NODE_COORD_TYPE: TWOD_COORDS

DEMAND_SECTION

name = BOPMid_full_matrix
Vehicle.capacity = 80000
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 647
arcs in instance: 417962
[[    0.    1362.13  1257.11 ...     0.   36605.84 30021.17]
 [ 1362.13     0.     591.42 ...     0.   35188.69 29549.85]
 [ 1257.11   591.42     0.   ... 24497.06 35036.61 28803.41]
 ...
 [    0.       0.   24497.06 ...     0.   19515.43 29337.72]
 [36605.84 35188.69 35036.61 ... 19515.43     0.   18250.97]
 [30021.17 29549.85 28803.41 ... 29337.72 18250.97     0.  ]]
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 641:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 642:
 0 Load(0) ->  98 Load(100) ->  97 Load(200) ->  96 Load(250) ->  95 Load(350) ->  94 Load(400) ->  93 Load(500) ->  92 Load(550) ->  91 Load(650) ->  90 Load(700) ->  89 Load(750) ->  88 Load(850) ->  87 Load(950) ->  86 Load(1000) ->  85 Load(1100) ->  84 Load(1200) ->  83 Load(1250) ->  82 Load(1300) ->  81 Load(1400) ->  80 Load(1500) ->  79 Load(1600) ->  78 Load(1700) ->  77 Load(1800) ->  76 Load(1900) ->  75 Load(2000) ->  74 Load(2050) ->  73 Load(2100) ->  72 Load(2200) ->  71 Load(2250) ->  70 Load(2300) ->  69 Load(2350) ->  68 Load(2400) ->  67 Load(2450) ->  66 Load(2500) ->  65 Load(2550) ->  64 Load(2580) ->  63 Load(2630) ->  62 Load(2680) ->  61 Load(2730) ->  60 Load(2780) ->  59 Load(2830) ->  58 Load(2880) ->  57 Load(2930) ->  56 Load(2980) ->  55 Load(3080) ->  54 Load(3130) ->  53 Load(3180) ->  52 Load(3230) ->  51 Load(3280) ->  50 Load(3330) ->  49 Load(3380) ->  48 Load(3430) ->  47 Load(3480) ->  46 Load(3530) ->  45 Load(3580) ->  44 Load(3630) ->  43 Load(3680) ->  42 Load(3730) ->  41 Load(3780) ->  40 Load(3830) ->  39 Load(3880) ->  38 Load(3980) ->  37 Load(4030) ->  36 Load(4080) ->  35 Load(4180) ->  34 Load(4230) ->  33 Load(4280) ->  32 Load(4380) ->  31 Load(4430) ->  30 Load(4480) ->  29 Load(4530) ->  28 Load(4580) ->  27 Load(4680) ->  26 Load(4780) ->  25 Load(4880) ->  24 Load(4980) ->  23 Load(5080) ->  22 Load(5180) ->  21 Load(5280) ->  20 Load(5330) ->  19 Load(5430) ->  18 Load(5530) ->  17 Load(5580) ->  16 Load(5630) ->  15 Load(5730) ->  14 Load(5830) ->  13 Load(5930) ->  12 Load(6030) ->  11 Load(6130) ->  10 Load(6230) ->  9 Load(6330) ->  8 Load(6430) ->  7 Load(6530) ->  6 Load(6630) ->  5 Load(6730) ->  4 Load(6830) ->  3 Load(6880) ->  2 Load(6980) ->  1 Load(7080) ->  0 Load(7080)
Distance of the route: 0m
Load of the route: 7080

Route for vehicle 643:
 0 Load(0) ->  228 Load(100) ->  226 Load(200) ->  225 Load(300) ->  224 Load(400) ->  223 Load(450) ->  222 Load(550) ->  221 Load(650) ->  220 Load(750) ->  219 Load(800) ->  218 Load(900) ->  217 Load(1000) ->  216 Load(1050) ->  215 Load(1100) ->  214 Load(1200) ->  213 Load(1300) ->  212 Load(1350) ->  211 Load(1450) ->  210 Load(1550) ->  209 Load(1650) ->  208 Load(1750) ->  207 Load(1850) ->  206 Load(1950) ->  205 Load(2050) ->  204 Load(2150) ->  203 Load(2250) ->  202 Load(2350) ->  201 Load(2450) ->  200 Load(2550) ->  199 Load(2600) ->  198 Load(2650) ->  197 Load(2750) ->  196 Load(2850) ->  195 Load(2950) ->  194 Load(3000) ->  193 Load(3050) ->  192 Load(3100) ->  191 Load(3200) ->  190 Load(3300) ->  189 Load(3400) ->  188 Load(3500) ->  187 Load(3600) ->  186 Load(3700) ->  185 Load(3800) ->  184 Load(3900) ->  183 Load(3950) ->  182 Load(4050) ->  181 Load(4100) ->  180 Load(4150) ->  179 Load(4200) ->  178 Load(4250) ->  177 Load(4300) ->  176 Load(4350) ->  175 Load(4400) ->  174 Load(4450) ->  173 Load(4550) ->  172 Load(4650) ->  171 Load(4750) ->  170 Load(4800) ->  169 Load(4900) ->  168 Load(5000) ->  167 Load(5100) ->  166 Load(5200) ->  165 Load(5250) ->  164 Load(5300) ->  163 Load(5350) ->  162 Load(5400) ->  161 Load(5450) ->  160 Load(5500) ->  159 Load(5550) ->  158 Load(5600) ->  157 Load(5700) ->  156 Load(5750) ->  155 Load(5850) ->  154 Load(5900) ->  153 Load(6000) ->  152 Load(6100) ->  151 Load(6200) ->  150 Load(6300) ->  149 Load(6350) ->  148 Load(6450) ->  147 Load(6550) ->  146 Load(6650) ->  145 Load(6750) ->  144 Load(6850) ->  143 Load(6950) ->  142 Load(7050) ->  141 Load(7150) ->  140 Load(7250) ->  139 Load(7350) ->  138 Load(7380) ->  137 Load(7430) ->  136 Load(7530) ->  135 Load(7580) ->  134 Load(7630) ->  133 Load(7680) ->  132 Load(7730) ->  131 Load(7830) ->  130 Load(7880) ->  129 Load(7980) ->  128 Load(8030) ->  127 Load(8080) ->  126 Load(8130) ->  125 Load(8180) ->  124 Load(8230) ->  123 Load(8280) ->  122 Load(8330) ->  121 Load(8380) ->  120 Load(8430) ->  119 Load(8530) ->  118 Load(8630) ->  117 Load(8680) ->  116 Load(8780) ->  115 Load(8880) ->  114 Load(8980) ->  113 Load(9080) ->  112 Load(9180) ->  111 Load(9280) ->  110 Load(9380) ->  109 Load(9430) ->  108 Load(9480) ->  107 Load(9530) ->  106 Load(9580) ->  105 Load(9630) ->  104 Load(9680) ->  103 Load(9730) ->  102 Load(9780) ->  101 Load(9830) ->  100 Load(9880) ->  99 Load(9980) ->  0 Load(9980)
Distance of the route: 0m
Load of the route: 9980

Route for vehicle 644:
 0 Load(0) ->  355 Load(50) ->  354 Load(100) ->  353 Load(200) ->  352 Load(250) ->  351 Load(300) ->  350 Load(350) ->  349 Load(380) ->  348 Load(480) ->  347 Load(530) ->  346 Load(580) ->  345 Load(610) ->  344 Load(710) ->  343 Load(760) ->  342 Load(810) ->  341 Load(860) ->  340 Load(960) ->  339 Load(1060) ->  338 Load(1160) ->  337 Load(1210) ->  336 Load(1260) ->  335 Load(1310) ->  334 Load(1360) ->  333 Load(1410) ->  332 Load(1460) ->  331 Load(1560) ->  330 Load(1660) ->  329 Load(1760) ->  328 Load(1810) ->  327 Load(1910) ->  326 Load(2010) ->  325 Load(2060) ->  324 Load(2110) ->  323 Load(2160) ->  322 Load(2210) ->  321 Load(2260) ->  320 Load(2360) ->  319 Load(2410) ->  318 Load(2460) ->  317 Load(2510) ->  316 Load(2560) ->  315 Load(2660) ->  314 Load(2710) ->  313 Load(2760) ->  312 Load(2810) ->  311 Load(2910) ->  310 Load(3010) ->  309 Load(3060) ->  308 Load(3160) ->  307 Load(3210) ->  306 Load(3260) ->  305 Load(3360) ->  304 Load(3460) ->  303 Load(3560) ->  302 Load(3660) ->  301 Load(3690) ->  300 Load(3790) ->  299 Load(3890) ->  298 Load(3990) ->  297 Load(4090) ->  296 Load(4140) ->  295 Load(4170) ->  294 Load(4220) ->  293 Load(4270) ->  292 Load(4300) ->  291 Load(4330) ->  290 Load(4380) ->  289 Load(4480) ->  288 Load(4580) ->  287 Load(4680) ->  286 Load(4780) ->  285 Load(4880) ->  284 Load(4980) ->  283 Load(5080) ->  282 Load(5180) ->  281 Load(5280) ->  280 Load(5380) ->  279 Load(5480) ->  278 Load(5580) ->  277 Load(5680) ->  276 Load(5780) ->  275 Load(5880) ->  274 Load(5930) ->  273 Load(6030) ->  272 Load(6080) ->  271 Load(6130) ->  270 Load(6180) ->  269 Load(6280) ->  268 Load(6380) ->  267 Load(6480) ->  266 Load(6580) ->  265 Load(6680) ->  264 Load(6780) ->  263 Load(6880) ->  262 Load(6980) ->  261 Load(7080) ->  260 Load(7180) ->  259 Load(7280) ->  258 Load(7330) ->  257 Load(7430) ->  256 Load(7530) ->  255 Load(7630) ->  254 Load(7730) ->  253 Load(7830) ->  252 Load(7930) ->  251 Load(8030) ->  250 Load(8130) ->  249 Load(8230) ->  248 Load(8330) ->  247 Load(8430) ->  246 Load(8480) ->  245 Load(8580) ->  244 Load(8680) ->  243 Load(8780) ->  242 Load(8880) ->  241 Load(8980) ->  240 Load(9080) ->  239 Load(9130) ->  238 Load(9180) ->  237 Load(9230) ->  236 Load(9280) ->  235 Load(9330) ->  234 Load(9430) ->  233 Load(9530) ->  232 Load(9630) ->  231 Load(9730) ->  230 Load(9830) ->  229 Load(9930) ->  227 Load(9980) ->  0 Load(9980)
Distance of the route: 0m
Load of the route: 9980

Route for vehicle 645:
 0 Load(0) ->  495 Load(100) ->  494 Load(200) ->  493 Load(250) ->  492 Load(300) ->  491 Load(350) ->  490 Load(450) ->  489 Load(550) ->  488 Load(650) ->  487 Load(750) ->  486 Load(850) ->  485 Load(950) ->  484 Load(1050) ->  483 Load(1150) ->  482 Load(1250) ->  481 Load(1350) ->  480 Load(1450) ->  479 Load(1550) ->  478 Load(1650) ->  477 Load(1750) ->  476 Load(1850) ->  475 Load(1900) ->  474 Load(1950) ->  473 Load(2000) ->  472 Load(2050) ->  471 Load(2100) ->  470 Load(2150) ->  469 Load(2200) ->  468 Load(2250) ->  467 Load(2280) ->  466 Load(2330) ->  465 Load(2360) ->  464 Load(2410) ->  463 Load(2460) ->  462 Load(2490) ->  461 Load(2540) ->  460 Load(2640) ->  459 Load(2690) ->  458 Load(2740) ->  457 Load(2790) ->  456 Load(2840) ->  455 Load(2890) ->  454 Load(2940) ->  453 Load(2990) ->  452 Load(3090) ->  451 Load(3190) ->  450 Load(3240) ->  449 Load(3290) ->  448 Load(3340) ->  447 Load(3390) ->  446 Load(3440) ->  445 Load(3490) ->  444 Load(3540) ->  443 Load(3590) ->  442 Load(3620) ->  441 Load(3650) ->  440 Load(3700) ->  439 Load(3750) ->  438 Load(3800) ->  437 Load(3850) ->  436 Load(3900) ->  435 Load(3950) ->  434 Load(4000) ->  433 Load(4050) ->  432 Load(4100) ->  431 Load(4150) ->  430 Load(4200) ->  429 Load(4300) ->  428 Load(4400) ->  427 Load(4500) ->  426 Load(4550) ->  425 Load(4650) ->  424 Load(4750) ->  423 Load(4850) ->  422 Load(4900) ->  421 Load(4950) ->  420 Load(4980) ->  419 Load(5030) ->  418 Load(5080) ->  417 Load(5130) ->  416 Load(5180) ->  415 Load(5230) ->  414 Load(5280) ->  413 Load(5330) ->  412 Load(5380) ->  411 Load(5430) ->  410 Load(5480) ->  409 Load(5530) ->  408 Load(5630) ->  407 Load(5680) ->  406 Load(5730) ->  405 Load(5780) ->  404 Load(5830) ->  403 Load(5880) ->  402 Load(5930) ->  401 Load(5980) ->  400 Load(6080) ->  399 Load(6130) ->  398 Load(6230) ->  397 Load(6280) ->  396 Load(6380) ->  395 Load(6430) ->  394 Load(6530) ->  393 Load(6630) ->  392 Load(6730) ->  391 Load(6830) ->  390 Load(6930) ->  389 Load(7030) ->  388 Load(7130) ->  387 Load(7180) ->  386 Load(7230) ->  385 Load(7330) ->  384 Load(7380) ->  383 Load(7430) ->  382 Load(7480) ->  381 Load(7530) ->  380 Load(7630) ->  379 Load(7730) ->  378 Load(7830) ->  377 Load(7930) ->  376 Load(8030) ->  375 Load(8130) ->  374 Load(8230) ->  373 Load(8330) ->  372 Load(8380) ->  371 Load(8480) ->  370 Load(8580) ->  369 Load(8680) ->  368 Load(8780) ->  367 Load(8880) ->  366 Load(8980) ->  365 Load(9080) ->  364 Load(9180) ->  363 Load(9280) ->  362 Load(9380) ->  361 Load(9480) ->  360 Load(9580) ->  359 Load(9680) ->  358 Load(9780) ->  357 Load(9880) ->  356 Load(9980) ->  0 Load(9980)
Distance of the route: 0m
Load of the route: 9980

Route for vehicle 646:
 0 Load(0) ->  646 Load(100) ->  645 Load(200) ->  644 Load(300) ->  643 Load(350) ->  642 Load(400) ->  641 Load(450) ->  640 Load(500) ->  639 Load(550) ->  638 Load(600) ->  637 Load(700) ->  636 Load(750) ->  635 Load(850) ->  634 Load(950) ->  633 Load(1000) ->  632 Load(1100) ->  631 Load(1200) ->  630 Load(1300) ->  629 Load(1400) ->  628 Load(1500) ->  627 Load(1550) ->  626 Load(1650) ->  625 Load(1750) ->  624 Load(1850) ->  623 Load(1950) ->  622 Load(2050) ->  621 Load(2150) ->  620 Load(2250) ->  619 Load(2350) ->  618 Load(2400) ->  617 Load(2500) ->  616 Load(2550) ->  615 Load(2600) ->  614 Load(2650) ->  613 Load(2700) ->  612 Load(2750) ->  611 Load(2850) ->  610 Load(2900) ->  609 Load(2950) ->  608 Load(3000) ->  607 Load(3050) ->  606 Load(3100) ->  605 Load(3150) ->  604 Load(3200) ->  603 Load(3250) ->  602 Load(3280) ->  601 Load(3310) ->  600 Load(3410) ->  599 Load(3460) ->  598 Load(3510) ->  597 Load(3560) ->  596 Load(3610) ->  595 Load(3660) ->  594 Load(3710) ->  593 Load(3760) ->  592 Load(3810) ->  591 Load(3860) ->  590 Load(3910) ->  589 Load(4010) ->  588 Load(4110) ->  587 Load(4160) ->  586 Load(4210) ->  585 Load(4260) ->  584 Load(4310) ->  583 Load(4360) ->  582 Load(4410) ->  581 Load(4460) ->  580 Load(4510) ->  579 Load(4610) ->  578 Load(4710) ->  577 Load(4760) ->  576 Load(4860) ->  575 Load(4910) ->  574 Load(5010) ->  573 Load(5110) ->  572 Load(5160) ->  571 Load(5260) ->  570 Load(5310) ->  569 Load(5410) ->  568 Load(5460) ->  567 Load(5510) ->  566 Load(5610) ->  565 Load(5710) ->  564 Load(5760) ->  563 Load(5810) ->  562 Load(5860) ->  561 Load(5910) ->  560 Load(6010) ->  559 Load(6060) ->  558 Load(6110) ->  557 Load(6160) ->  556 Load(6210) ->  555 Load(6260) ->  554 Load(6310) ->  553 Load(6410) ->  552 Load(6460) ->  551 Load(6560) ->  550 Load(6660) ->  549 Load(6760) ->  548 Load(6810) ->  547 Load(6860) ->  546 Load(6910) ->  545 Load(7010) ->  544 Load(7040) ->  543 Load(7090) ->  542 Load(7140) ->  541 Load(7190) ->  540 Load(7240) ->  539 Load(7290) ->  538 Load(7340) ->  537 Load(7440) ->  536 Load(7490) ->  535 Load(7540) ->  534 Load(7590) ->  533 Load(7640) ->  532 Load(7740) ->  531 Load(7790) ->  530 Load(7840) ->  529 Load(7890) ->  528 Load(7990) ->  527 Load(8090) ->  526 Load(8140) ->  525 Load(8240) ->  524 Load(8340) ->  523 Load(8370) ->  522 Load(8470) ->  521 Load(8570) ->  520 Load(8620) ->  519 Load(8670) ->  518 Load(8720) ->  517 Load(8770) ->  516 Load(8820) ->  515 Load(8870) ->  514 Load(8970) ->  513 Load(9070) ->  512 Load(9100) ->  511 Load(9150) ->  510 Load(9200) ->  509 Load(9250) ->  508 Load(9300) ->  507 Load(9350) ->  506 Load(9400) ->  505 Load(9450) ->  504 Load(9500) ->  503 Load(9550) ->  502 Load(9600) ->  501 Load(9700) ->  500 Load(9750) ->  499 Load(9850) ->  498 Load(9900) ->  497 Load(9950) ->  496 Load(10000) ->  0 Load(10000)
Distance of the route: 0m
Load of the route: 10000

Total distance of all routes: 0m
Total load of all routes: 47020

--------------------------------------------------------------------------


Running external_data_routing.py took too long within Atom, so I ran it in cmd instead.
It also took more than a minute in cmd, so I killed the process, and it outputted the above.
The distance is 0m, again. How frustrating.

I ran Andersen_n8 again in Atom, and everything runs fine as before.
I try solving X_n101_k25. It loads and outputs the distance matrix, but

--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

DEMAND_SECTION

name = X-n101-k25
Vehicle.capacity = 206
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [365, 689]
nodes in instance, including depot: 101
arcs in instance: 10100
[[   0.          554.11370674  806.3404988  ...  647.87653145
   644.23753383  257.33441278]
 [ 554.11370674    0.          669.28394572 ... 1090.74745015
  1116.1379843   738.14700433]
 [ 806.3404988   669.28394572    0.         ...  893.10301757
   958.78516885  765.73755295]
 ...
 [ 647.87653145 1090.74745015  893.10301757 ...    0.
    79.30952024  391.18921253]
 [ 644.23753383 1116.1379843   958.78516885 ...   79.30952024
     0.          393.60005081]
 [ 257.33441278  738.14700433  765.73755295 ...  391.18921253
   393.60005081    0.        ]]
--------------------------------------------------------------------------

Perhaps because get_distance_matrix() creates a distance matrix each time it is called, it takes too long and bloats the process?
In that case, we just summon the distance matrix once.

    distance_matrix = vrp_instance.get_distance_matrix()

    def distance_callback(from_index, to_index):
          from_node = manager.IndexToNode(from_index)
          to_node = manager.IndexToNode(to_index)
          return distance_matrix[from_node][to_node]

And try running X_n101_k25 again:
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

DEMAND_SECTION

name = X-n101-k25
Vehicle.capacity = 206
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [365, 689]
nodes in instance, including depot: 101
arcs in instance: 10100
[[   0.          554.11370674  806.3404988  ...  647.87653145
   644.23753383  257.33441278]
 [ 554.11370674    0.          669.28394572 ... 1090.74745015
  1116.1379843   738.14700433]
 [ 806.3404988   669.28394572    0.         ...  893.10301757
   958.78516885  765.73755295]
 ...
 [ 647.87653145 1090.74745015  893.10301757 ...    0.
    79.30952024  391.18921253]
 [ 644.23753383 1116.1379843   958.78516885 ...   79.30952024
     0.          393.60005081]
 [ 257.33441278  738.14700433  765.73755295 ...  391.18921253
   393.60005081    0.        ]]
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  0 Load(197)
Distance of the route: 2111m
Load of the route: 197
.
.
.
Route for vehicle 74:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 75:
 0 Load(0) ->  70 Load(96) ->  76 Load(102) ->  2 Load(153) ->  49 Load(206) ->  0 Load(206)
Distance of the route: 2224m
Load of the route: 206

Route for vehicle 76:
 0 Load(0) ->  64 Load(3) ->  87 Load(5) ->  43 Load(20) ->  45 Load(34) ->  7 Load(35) ->  74 Load(108) ->  16 Load(205) ->  0 Load(205)
Distance of the route: 2265m
Load of the route: 205

Route for vehicle 77:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  6 Load(98) ->  37 Load(168) ->  57 Load(176) ->  88 Load(197) ->  0 Load(197)
Distance of the route: 1344m
Load of the route: 197

Route for vehicle 78:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  55 Load(202) ->  0 Load(202)
Distance of the route: 1372m
Load of the route: 202

Route for vehicle 79:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 1313m
Load of the route: 196

Route for vehicle 80:
 0 Load(0) ->  1 Load(38) ->  86 Load(111) ->  54 Load(178) ->  69 Load(206) ->  0 Load(206)
Distance of the route: 1466m
Load of the route: 206

Route for vehicle 81:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1203m
Load of the route: 196

Route for vehicle 82:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 1219m
Load of the route: 201

Route for vehicle 83:
 0 Load(0) ->  26 Load(18) ->  48 Load(111) ->  3 Load(184) ->  34 Load(189) ->  0 Load(189)
Distance of the route: 1141m
Load of the route: 189

Route for vehicle 84:
 0 Load(0) ->  39 Load(27) ->  25 Load(80) ->  10 Load(178) ->  0 Load(178)
Distance of the route: 925m
Load of the route: 178

Route for vehicle 85:
 0 Load(0) ->  14 Load(27) ->  28 Load(59) ->  42 Load(135) ->  63 Load(200) ->  0 Load(200)
Distance of the route: 1059m
Load of the route: 200

Route for vehicle 86:
 0 Load(0) ->  11 Load(25) ->  81 Load(39) ->  91 Load(114) ->  27 Load(201) ->  0 Load(201)
Distance of the route: 1165m
Load of the route: 201

Route for vehicle 87:
 0 Load(0) ->  59 Load(55) ->  60 Load(122) ->  82 Load(205) ->  0 Load(205)
Distance of the route: 985m
Load of the route: 205

Route for vehicle 88:
 0 Load(0) ->  40 Load(42) ->  67 Load(142) ->  77 Load(206) ->  0 Load(206)
Distance of the route: 904m
Load of the route: 206

Route for vehicle 89:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  13 Load(197) ->  0 Load(197)
Distance of the route: 1270m
Load of the route: 197

Route for vehicle 90:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 836m
Load of the route: 205

Route for vehicle 91:
 0 Load(0) ->  94 Load(61) ->  96 Load(101) ->  44 Load(140) ->  58 Load(198) ->  0 Load(198)
Distance of the route: 874m
Load of the route: 198

Route for vehicle 92:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 805m
Load of the route: 191

Route for vehicle 93:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 840m
Load of the route: 199

Route for vehicle 94:
 0 Load(0) ->  38 Load(32) ->  56 Load(82) ->  8 Load(180) ->  0 Load(180)
Distance of the route: 991m
Load of the route: 180

Route for vehicle 95:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 474m
Load of the route: 144

Route for vehicle 96:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  85 Load(140) ->  30 Load(201) ->  0 Load(201)
Distance of the route: 792m
Load of the route: 201

Route for vehicle 97:
 0 Load(0) ->  21 Load(23) ->  100 Load(58) ->  61 Load(147) ->  97 Load(195) ->  0 Load(195)
Distance of the route: 745m
Load of the route: 195

Route for vehicle 98:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 533m
Load of the route: 144

Route for vehicle 99:
 0 Load(0) ->  79 Load(86) ->  50 Load(130) ->  0 Load(130)
Distance of the route: 350m
Load of the route: 130

Route for vehicle 100:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 889m
Load of the route: 178

Total distance of all routes: 30095m
Total load of all routes: 5147
[Finished in 1.783s]

--------------------------------------------------------------------------


Yay! It worked! Let's try with BOPMid_full_matrix:
 vehicle_capacity = 10000
 search_parameters.time_limit.seconds = 30

--------------------------------------------------------------------------
NAME: BOPMid_full_matrix

TYPE: CVRP

COMMENT: Stands for "Birds Of Prey Mid-paddock", describing the drone-surveyed area at which said birds tried to take down survey drone. Located at Redlands Park, McKinlay, QLD, Australia. Collected by Tiria Andersen, see Honours Thesis.

DIMENSION: 647

CAPACITY: 80000

EDGE_WEIGHT_TYPE: EXPLICIT

EDGE_WEIGHT_FORMAT: FULL_MATRIX

NODE_COORD_TYPE: TWOD_COORDS

DEMAND_SECTION

name = BOPMid_full_matrix
Vehicle.capacity = 80000
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 647
arcs in instance: 417962
[[    0.    1362.13  1257.11 ...     0.   36605.84 30021.17]
 [ 1362.13     0.     591.42 ...     0.   35188.69 29549.85]
 [ 1257.11   591.42     0.   ... 24497.06 35036.61 28803.41]
 ...
 [    0.       0.   24497.06 ...     0.   19515.43 29337.72]
 [36605.84 35188.69 35036.61 ... 19515.43     0.   18250.97]
 [30021.17 29549.85 28803.41 ... 29337.72 18250.97     0.  ]]
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  285 Load(100) ->  0 Load(100)
Distance of the route: 0m
Load of the route: 100

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0
.
.
.
Route for vehicle 641:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 642:
 0 Load(0) ->  540 Load(50) ->  271 Load(100) ->  302 Load(200) ->  270 Load(250) ->  295 Load(280) ->  301 Load(310) ->  293 Load(360) ->  1 Load(460) ->  2 Load(560) ->  456 Load(610) ->  83 Load(660) ->  84 Load(760) ->  581 Load(810) ->  114 Load(910) ->  141 Load(1010) ->  166 Load(1110) ->  162 Load(1160) ->  163 Load(1210) ->  559 Load(1260) ->  327 Load(1360) ->  329 Load(1460) ->  330 Load(1560) ->  596 Load(1610) ->  400 Load(1710) ->  595 Load(1760) ->  511 Load(1810) ->  236 Load(1860) ->  399 Load(1910) ->  398 Load(2010) ->  460 Load(2110) ->  249 Load(2210) ->  451 Load(2310) ->  241 Load(2410) ->  502 Load(2460) ->  594 Load(2510) ->  503 Load(2560) ->  494 Load(2660) ->  507 Load(2710) ->  553 Load(2810) ->  308 Load(2910) ->  309 Load(2960) ->  390 Load(3060) ->  304 Load(3160) ->  477 Load(3260) ->  299 Load(3360) ->  300 Load(3460) ->  478 Load(3560) ->  611 Load(3660) ->  273 Load(3760) ->  261 Load(3860) ->  263 Load(3960) ->  272 Load(4010) ->  260 Load(4110) ->  262 Load(4210) ->  264 Load(4310) ->  265 Load(4410) ->  267 Load(4510) ->  266 Load(4610) ->  268 Load(4710) ->  269 Load(4810) ->  256 Load(4910) ->  257 Load(5010) ->  464 Load(5060) ->  221 Load(5160) ->  513 Load(5260) ->  225 Load(5360) ->  463 Load(5410) ->  570 Load(5460) ->  571 Load(5560) ->  572 Load(5610) ->  574 Load(5710) ->  536 Load(5760) ->  620 Load(5860) ->  525 Load(5960) ->  625 Load(6060) ->  622 Load(6160) ->  629 Load(6260) ->  632 Load(6360) ->  586 Load(6410) ->  631 Load(6510) ->  485 Load(6610) ->  420 Load(6640) ->  637 Load(6740) ->  638 Load(6790) ->  607 Load(6840) ->  516 Load(6890) ->  515 Load(6940) ->  517 Load(6990) ->  539 Load(7040) ->  583 Load(7090) ->  618 Load(7140) ->  584 Load(7190) ->  640 Load(7240) ->  534 Load(7290) ->  535 Load(7340) ->  520 Load(7390) ->  522 Load(7490) ->  521 Load(7590) ->  519 Load(7640) ->  580 Load(7690) ->  518 Load(7740) ->  538 Load(7790) ->  474 Load(7840) ->  597 Load(7890) ->  475 Load(7940) ->  598 Load(7990) ->  600 Load(8090) ->  353 Load(8190) ->  355 Load(8240) ->  208 Load(8340) ->  465 Load(8370) ->  111 Load(8470) ->  110 Load(8570) ->  100 Load(8620) ->  101 Load(8670) ->  102 Load(8720) ->  566 Load(8820) ->  106 Load(8870) ->  76 Load(8970) ->  224 Load(9070) ->  24 Load(9170) ->  21 Load(9270) ->  199 Load(9320) ->  6 Load(9420) ->  238 Load(9470) ->  4 Load(9570) ->  7 Load(9670) ->  5 Load(9770) ->  0 Load(9770)
Distance of the route: 36089m
Load of the route: 9770

Route for vehicle 643:
 0 Load(0) ->  287 Load(100) ->  286 Load(200) ->  469 Load(250) ->  642 Load(300) ->  587 Load(350) ->  641 Load(400) ->  626 Load(500) ->  533 Load(550) ->  630 Load(650) ->  635 Load(750) ->  636 Load(800) ->  624 Load(900) ->  621 Load(1000) ->  486 Load(1100) ->  483 Load(1200) ->  481 Load(1300) ->  480 Load(1400) ->  479 Load(1500) ->  646 Load(1600) ->  432 Load(1650) ->  431 Load(1700) ->  239 Load(1750) ->  394 Load(1850) ->  633 Load(1900) ->  523 Load(1930) ->  577 Load(1980) ->  212 Load(2030) ->  576 Load(2130) ->  142 Load(2230) ->  143 Load(2330) ->  169 Load(2430) ->  144 Load(2530) ->  145 Load(2630) ->  103 Load(2680) ->  159 Load(2730) ->  158 Load(2780) ->  156 Load(2830) ->  155 Load(2930) ->  154 Load(2980) ->  153 Load(3080) ->  160 Load(3130) ->  146 Load(3230) ->  151 Load(3330) ->  152 Load(3430) ->  545 Load(3530) ->  164 Load(3580) ->  176 Load(3630) ->  128 Load(3680) ->  109 Load(3730) ->  94 Load(3780) ->  89 Load(3830) ->  90 Load(3880) ->  93 Load(3980) ->  108 Load(4030) ->  92 Load(4080) ->  91 Load(4180) ->  97 Load(4280) ->  96 Load(4330) ->  95 Load(4430) ->  79 Load(4530) ->  203 Load(4630) ->  46 Load(4680) ->  48 Load(4730) ->  47 Load(4780) ->  132 Load(4830) ->  121 Load(4880) ->  122 Load(4930) ->  124 Load(4980) ->  74 Load(5030) ->  41 Load(5080) ->  40 Load(5130) ->  98 Load(5230) ->  45 Load(5280) ->  44 Load(5330) ->  42 Load(5380) ->  43 Load(5430) ->  55 Load(5530) ->  54 Load(5580) ->  51 Load(5630) ->  117 Load(5680) ->  120 Load(5730) ->  52 Load(5780) ->  53 Load(5830) ->  56 Load(5880) ->  58 Load(5930) ->  59 Load(5980) ->  61 Load(6030) ->  62 Load(6080) ->  32 Load(6180) ->  73 Load(6230) ->  85 Load(6330) ->  604 Load(6380) ->  137 Load(6430) ->  127 Load(6480) ->  72 Load(6580) ->  86 Load(6630) ->  66 Load(6680) ->  67 Load(6730) ->  68 Load(6780) ->  69 Load(6830) ->  65 Load(6880) ->  70 Load(6930) ->  71 Load(6980) ->  81 Load(7080) ->  82 Load(7130) ->  33 Load(7180) ->  602 Load(7210) ->  75 Load(7310) ->  107 Load(7360) ->  134 Load(7410) ->  77 Load(7510) ->  125 Load(7560) ->  78 Load(7660) ->  126 Load(7710) ->  80 Load(7810) ->  133 Load(7860) ->  104 Load(7910) ->  105 Load(7960) ->  202 Load(8060) ->  115 Load(8160) ->  112 Load(8260) ->  113 Load(8360) ->  219 Load(8410) ->  378 Load(8510) ->  228 Load(8610) ->  372 Load(8660) ->  537 Load(8760) ->  608 Load(8810) ->  514 Load(8910) ->  217 Load(9010) ->  28 Load(9060) ->  31 Load(9110) ->  30 Load(9160) ->  13 Load(9260) ->  14 Load(9360) ->  29 Load(9410) ->  34 Load(9460) ->  35 Load(9560) ->  36 Load(9610) ->  37 Load(9660) ->  218 Load(9760) ->  0 Load(9760)
Distance of the route: 26529m
Load of the route: 9760

Route for vehicle 644:
 0 Load(0) ->  8 Load(100) ->  550 Load(200) ->  9 Load(300) ->  10 Load(400) ->  230 Load(500) ->  12 Load(600) ->  22 Load(700) ->  23 Load(800) ->  27 Load(900) ->  26 Load(1000) ->  15 Load(1100) ->  20 Load(1150) ->  19 Load(1250) ->  16 Load(1300) ->  17 Load(1350) ->  18 Load(1450) ->  216 Load(1500) ->  129 Load(1600) ->  565 Load(1700) ->  39 Load(1750) ->  138 Load(1780) ->  136 Load(1880) ->  123 Load(1930) ->  63 Load(1980) ->  579 Load(2080) ->  50 Load(2130) ->  57 Load(2180) ->  60 Load(2230) ->  575 Load(2280) ->  49 Load(2330) ->  118 Load(2430) ->  119 Load(2530) ->  116 Load(2630) ->  38 Load(2730) ->  206 Load(2830) ->  135 Load(2880) ->  131 Load(2980) ->  140 Load(3080) ->  254 Load(3180) ->  543 Load(3230) ->  544 Load(3260) ->  161 Load(3310) ->  165 Load(3360) ->  147 Load(3460) ->  148 Load(3560) ->  149 Load(3610) ->  167 Load(3710) ->  150 Load(3810) ->  168 Load(3910) ->  366 Load(4010) ->  307 Load(4060) ->  255 Load(4160) ->  542 Load(4210) ->  306 Load(4260) ->  259 Load(4360) ->  258 Load(4410) ->  359 Load(4510) ->  335 Load(4560) ->  326 Load(4660) ->  601 Load(4690) ->  556 Load(4740) ->  324 Load(4790) ->  325 Load(4840) ->  320 Load(4940) ->  319 Load(4990) ->  196 Load(5090) ->  609 Load(5140) ->  588 Load(5240) ->  351 Load(5290) ->  350 Load(5340) ->  348 Load(5440) ->  197 Load(5540) ->  349 Load(5570) ->  347 Load(5620) ->  346 Load(5670) ->  340 Load(5770) ->  186 Load(5870) ->  345 Load(5900) ->  344 Load(6000) ->  342 Load(6050) ->  343 Load(6100) ->  341 Load(6150) ->  337 Load(6200) ->  338 Load(6300) ->  332 Load(6350) ->  561 Load(6400) ->  331 Load(6500) ->  191 Load(6600) ->  313 Load(6650) ->  557 Load(6700) ->  328 Load(6750) ->  555 Load(6800) ->  311 Load(6900) ->  312 Load(6950) ->  194 Load(7000) ->  310 Load(7100) ->  315 Load(7200) ->  316 Load(7250) ->  200 Load(7350) ->  317 Load(7400) ->  318 Load(7450) ->  192 Load(7500) ->  323 Load(7550) ->  322 Load(7600) ->  321 Load(7650) ->  614 Load(7700) ->  615 Load(7750) ->  616 Load(7800) ->  613 Load(7850) ->  391 Load(7950) ->  369 Load(8050) ->  227 Load(8100) ->  368 Load(8200) ->  229 Load(8300) ->  367 Load(8400) ->  599 Load(8450) ->  389 Load(8550) ->  358 Load(8650) ->  356 Load(8750) ->  582 Load(8800) ->  0 Load(8800)
Distance of the route: 38458m
Load of the route: 8800

Route for vehicle 645:
 0 Load(0) ->  643 Load(50) ->  288 Load(150) ->  289 Load(250) ->  281 Load(350) ->  282 Load(450) ->  280 Load(550) ->  279 Load(650) ->  278 Load(750) ->  277 Load(850) ->  541 Load(900) ->  283 Load(1000) ->  284 Load(1100) ->  294 Load(1150) ->  639 Load(1200) ->  292 Load(1230) ->  276 Load(1330) ->  291 Load(1360) ->  290 Load(1410) ->  634 Load(1510) ->  298 Load(1610) ->  297 Load(1710) ->  11 Load(1810) ->  562 Load(1860) ->  201 Load(1960) ->  244 Load(2060) ->  413 Load(2110) ->  417 Load(2160) ->  416 Load(2210) ->  412 Load(2260) ->  401 Load(2310) ->  472 Load(2360) ->  403 Load(2410) ->  402 Load(2460) ->  233 Load(2560) ->  415 Load(2610) ->  414 Load(2660) ->  434 Load(2710) ->  445 Load(2760) ->  242 Load(2860) ->  173 Load(2960) ->  552 Load(3010) ->  240 Load(3110) ->  470 Load(3160) ->  433 Load(3210) ->  462 Load(3240) ->  409 Load(3290) ->  408 Load(3390) ->  410 Load(3440) ->  411 Load(3490) ->  407 Load(3540) ->  406 Load(3590) ->  459 Load(3640) ->  458 Load(3690) ->  235 Load(3740) ->  447 Load(3790) ->  457 Load(3840) ->  424 Load(3940) ->  423 Load(4040) ->  455 Load(4090) ->  589 Load(4190) ->  439 Load(4240) ->  438 Load(4290) ->  436 Load(4340) ->  437 Load(4390) ->  471 Load(4440) ->  435 Load(4490) ->  444 Load(4540) ->  446 Load(4590) ->  443 Load(4640) ->  383 Load(4690) ->  422 Load(4740) ->  421 Load(4790) ->  387 Load(4840) ->  468 Load(4890) ->  430 Load(4940) ->  370 Load(5040) ->  448 Load(5090) ->  382 Load(5140) ->  440 Load(5190) ->  371 Load(5290) ->  441 Load(5320) ->  373 Load(5420) ->  449 Load(5470) ->  381 Load(5520) ->  442 Load(5550) ->  386 Load(5600) ->  466 Load(5650) ->  467 Load(5680) ->  612 Load(5730) ->  428 Load(5830) ->  429 Load(5930) ->  450 Load(5980) ->  427 Load(6080) ->  362 Load(6180) ->  461 Load(6230) ->  363 Load(6330) ->  426 Load(6380) ->  274 Load(6430) ->  419 Load(6480) ->  418 Load(6530) ->  388 Load(6630) ->  482 Load(6730) ->  617 Load(6830) ->  619 Load(6930) ->  484 Load(7030) ->  454 Load(7080) ->  452 Load(7180) ->  237 Load(7230) ->  453 Load(7280) ->  234 Load(7380) ->  395 Load(7430) ->  425 Load(7530) ->  396 Load(7630) ->  393 Load(7730) ->  397 Load(7780) ->  246 Load(7830) ->  404 Load(7880) ->  473 Load(7930) ->  405 Load(7980) ->  243 Load(8080) ->  379 Load(8180) ->  232 Load(8280) ->  384 Load(8330) ->  275 Load(8430) ->  380 Load(8530) ->  606 Load(8580) ->  375 Load(8680) ->  374 Load(8780) ->  512 Load(8810) ->  64 Load(8840) ->  578 Load(8940) ->  603 Load(8990) ->  357 Load(9090) ->  0 Load(9090)
Distance of the route: 18346m
Load of the route: 9090

Route for vehicle 646:
 0 Load(0) ->  585 Load(50) ->  3 Load(100) ->  99 Load(200) ->  130 Load(250) ->  184 Load(350) ->  198 Load(400) ->  170 Load(450) ->  195 Load(550) ->  25 Load(650) ->  139 Load(750) ->  87 Load(850) ->  88 Load(950) ->  226 Load(1050) ->  215 Load(1100) ->  214 Load(1200) ->  223 Load(1250) ->  175 Load(1300) ->  183 Load(1350) ->  182 Load(1450) ->  178 Load(1500) ->  179 Load(1550) ->  181 Load(1600) ->  180 Load(1650) ->  220 Load(1750) ->  177 Load(1800) ->  222 Load(1900) ->  188 Load(2000) ->  190 Load(2100) ->  189 Load(2200) ->  187 Load(2300) ->  185 Load(2400) ->  207 Load(2500) ->  213 Load(2600) ->  204 Load(2700) ->  205 Load(2800) ->  645 Load(2900) ->  211 Load(3000) ->  210 Load(3100) ->  548 Load(3150) ->  209 Load(3250) ->  352 Load(3300) ->  354 Load(3350) ->  339 Load(3450) ->  592 Load(3500) ->  510 Load(3550) ->  364 Load(3650) ->  509 Load(3700) ->  591 Load(3750) ->  508 Load(3800) ->  590 Load(3850) ->  495 Load(3950) ->  505 Load(4000) ->  569 Load(4100) ->  551 Load(4200) ->  231 Load(4300) ->  172 Load(4400) ->  568 Load(4450) ->  174 Load(4500) ->  560 Load(4600) ->  171 Load(4700) ->  549 Load(4800) ->  554 Load(4850) ->  610 Load(4900) ->  558 Load(4950) ->  546 Load(5000) ->  564 Load(5050) ->  336 Load(5100) ->  563 Load(5150) ->  334 Load(5200) ->  193 Load(5250) ->  333 Load(5300) ->  593 Load(5350) ->  385 Load(5450) ->  377 Load(5550) ->  376 Load(5650) ->  605 Load(5700) ->  392 Load(5800) ->  476 Load(5900) ->  305 Load(6000) ->  547 Load(6050) ->  157 Load(6150) ->  361 Load(6250) ->  506 Load(6300) ->  504 Load(6350) ->  365 Load(6450) ->  501 Load(6550) ->  360 Load(6650) ->  499 Load(6750) ->  253 Load(6850) ->  498 Load(6900) ->  252 Load(7000) ->  567 Load(7050) ->  250 Load(7150) ->  497 Load(7200) ->  314 Load(7250) ->  496 Load(7300) ->  303 Load(7400) ->  493 Load(7450) ->  500 Load(7500) ->  251 Load(7600) ->  492 Load(7650) ->  248 Load(7750) ->  491 Load(7800) ->  247 Load(7900) ->  490 Load(8000) ->  489 Load(8100) ->  245 Load(8200) ->  488 Load(8300) ->  532 Load(8400) ->  623 Load(8500) ->  524 Load(8600) ->  627 Load(8650) ->  526 Load(8700) ->  527 Load(8800) ->  573 Load(8900) ->  529 Load(8950) ->  528 Load(9050) ->  530 Load(9100) ->  487 Load(9200) ->  531 Load(9250) ->  628 Load(9350) ->  296 Load(9400) ->  644 Load(9500) ->  0 Load(9500)
Distance of the route: 19609m
Load of the route: 9500

Total distance of all routes: 139031m
Total load of all routes: 47020
[Finished in 31.976s]
--------------------------------------------------------------------------


It worked! Excellent. Looks like the total distance is 139031m for a solution found in 30 seconds.
Note that I didn't convert the distance matrix into integers.

Let's see if the solution improves given a longer search time - say 2 minutes.
--------------------------------------------------------------------------

NAME: BOPMid_full_matrix

TYPE: CVRP

COMMENT: Stands for "Birds Of Prey Mid-paddock", describing the drone-surveyed area at which said birds tried to take down survey drone. Located at Redlands Park, McKinlay, QLD, Australia. Collected by Tiria Andersen, see Honours Thesis.

DIMENSION: 647

CAPACITY: 80000

EDGE_WEIGHT_TYPE: EXPLICIT

EDGE_WEIGHT_FORMAT: FULL_MATRIX

NODE_COORD_TYPE: TWOD_COORDS

DEMAND_SECTION

name = BOPMid_full_matrix
Vehicle.capacity = 80000
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 647
arcs in instance: 417962
[[    0.    1362.13  1257.11 ...     0.   36605.84 30021.17]
 [ 1362.13     0.     591.42 ...     0.   35188.69 29549.85]
 [ 1257.11   591.42     0.   ... 24497.06 35036.61 28803.41]
 ...
 [    0.       0.   24497.06 ...     0.   19515.43 29337.72]
 [36605.84 35188.69 35036.61 ... 19515.43     0.   18250.97]
 [30021.17 29549.85 28803.41 ... 29337.72 18250.97     0.  ]]
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  285 Load(100) ->  0 Load(100)
Distance of the route: 0m
Load of the route: 100

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0
.
.
.
Route for vehicle 641:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 642:
 0 Load(0) ->  643 Load(50) ->  288 Load(150) ->  289 Load(250) ->  281 Load(350) ->  282 Load(450) ->  280 Load(550) ->  279 Load(650) ->  278 Load(750) ->  277 Load(850) ->  284 Load(950) ->  283 Load(1050) ->  541 Load(1100) ->  634 Load(1200) ->  298 Load(1300) ->  297 Load(1400) ->  11 Load(1500) ->  562 Load(1550) ->  201 Load(1650) ->  244 Load(1750) ->  413 Load(1800) ->  417 Load(1850) ->  416 Load(1900) ->  412 Load(1950) ->  425 Load(2050) ->  395 Load(2100) ->  234 Load(2200) ->  453 Load(2250) ->  237 Load(2300) ->  452 Load(2400) ->  454 Load(2450) ->  456 Load(2500) ->  176 Load(2550) ->  128 Load(2600) ->  109 Load(2650) ->  94 Load(2700) ->  226 Load(2800) ->  215 Load(2850) ->  214 Load(2950) ->  223 Load(3000) ->  175 Load(3050) ->  183 Load(3100) ->  182 Load(3200) ->  178 Load(3250) ->  179 Load(3300) ->  181 Load(3350) ->  180 Load(3400) ->  220 Load(3500) ->  177 Load(3550) ->  222 Load(3650) ->  188 Load(3750) ->  187 Load(3850) ->  189 Load(3950) ->  190 Load(4050) ->  554 Load(4100) ->  601 Load(4130) ->  558 Load(4180) ->  546 Load(4230) ->  564 Load(4280) ->  336 Load(4330) ->  563 Load(4380) ->  334 Load(4430) ->  333 Load(4480) ->  593 Load(4530) ->  385 Load(4630) ->  570 Load(4680) ->  571 Load(4780) ->  572 Load(4830) ->  573 Load(4930) ->  536 Load(4980) ->  620 Load(5080) ->  525 Load(5180) ->  625 Load(5280) ->  622 Load(5380) ->  629 Load(5480) ->  632 Load(5580) ->  586 Load(5630) ->  631 Load(5730) ->  485 Load(5830) ->  420 Load(5860) ->  637 Load(5960) ->  638 Load(6010) ->  607 Load(6060) ->  516 Load(6110) ->  515 Load(6160) ->  517 Load(6210) ->  539 Load(6260) ->  583 Load(6310) ->  618 Load(6360) ->  584 Load(6410) ->  640 Load(6460) ->  534 Load(6510) ->  535 Load(6560) ->  520 Load(6610) ->  522 Load(6710) ->  521 Load(6810) ->  519 Load(6860) ->  580 Load(6910) ->  518 Load(6960) ->  538 Load(7010) ->  474 Load(7060) ->  598 Load(7110) ->  358 Load(7210) ->  600 Load(7310) ->  465 Load(7340) ->  101 Load(7390) ->  102 Load(7440) ->  566 Load(7540) ->  106 Load(7590) ->  76 Load(7690) ->  224 Load(7790) ->  13 Load(7890) ->  22 Load(7990) ->  21 Load(8090) ->  199 Load(8140) ->  4 Load(8240) ->  7 Load(8340) ->  5 Load(8440) ->  0 Load(8440)
Distance of the route: 26741m
Load of the route: 8440

Route for vehicle 643:
 0 Load(0) ->  6 Load(100) ->  238 Load(150) ->  550 Load(250) ->  8 Load(350) ->  549 Load(450) ->  9 Load(550) ->  10 Load(650) ->  230 Load(750) ->  12 Load(850) ->  195 Load(950) ->  170 Load(1000) ->  198 Load(1050) ->  184 Load(1150) ->  193 Load(1200) ->  174 Load(1250) ->  560 Load(1350) ->  171 Load(1450) ->  568 Load(1500) ->  172 Load(1600) ->  231 Load(1700) ->  551 Load(1800) ->  569 Load(1900) ->  505 Load(1950) ->  495 Load(2050) ->  590 Load(2100) ->  508 Load(2150) ->  591 Load(2200) ->  509 Load(2250) ->  364 Load(2350) ->  510 Load(2400) ->  592 Load(2450) ->  609 Load(2500) ->  353 Load(2600) ->  354 Load(2650) ->  352 Load(2700) ->  209 Load(2800) ->  548 Load(2850) ->  210 Load(2950) ->  211 Load(3050) ->  645 Load(3150) ->  205 Load(3250) ->  204 Load(3350) ->  213 Load(3450) ->  574 Load(3550) ->  355 Load(3600) ->  186 Load(3700) ->  185 Load(3800) ->  130 Load(3850) ->  88 Load(3950) ->  89 Load(4000) ->  90 Load(4050) ->  93 Load(4150) ->  108 Load(4200) ->  92 Load(4250) ->  91 Load(4350) ->  97 Load(4450) ->  96 Load(4500) ->  95 Load(4600) ->  79 Load(4700) ->  203 Load(4800) ->  46 Load(4850) ->  48 Load(4900) ->  47 Load(4950) ->  39 Load(5000) ->  132 Load(5050) ->  122 Load(5100) ->  124 Load(5150) ->  74 Load(5200) ->  41 Load(5250) ->  40 Load(5300) ->  98 Load(5400) ->  45 Load(5450) ->  44 Load(5500) ->  38 Load(5600) ->  42 Load(5650) ->  43 Load(5700) ->  55 Load(5800) ->  54 Load(5850) ->  51 Load(5900) ->  117 Load(5950) ->  120 Load(6000) ->  52 Load(6050) ->  53 Load(6100) ->  56 Load(6150) ->  58 Load(6200) ->  59 Load(6250) ->  61 Load(6300) ->  62 Load(6350) ->  32 Load(6450) ->  73 Load(6500) ->  85 Load(6600) ->  604 Load(6650) ->  137 Load(6700) ->  127 Load(6750) ->  72 Load(6850) ->  86 Load(6900) ->  66 Load(6950) ->  67 Load(7000) ->  68 Load(7050) ->  69 Load(7100) ->  65 Load(7150) ->  70 Load(7200) ->  71 Load(7250) ->  81 Load(7350) ->  82 Load(7400) ->  33 Load(7450) ->  602 Load(7480) ->  75 Load(7580) ->  107 Load(7630) ->  134 Load(7680) ->  77 Load(7780) ->  125 Load(7830) ->  78 Load(7930) ->  126 Load(7980) ->  80 Load(8080) ->  133 Load(8130) ->  104 Load(8180) ->  105 Load(8230) ->  202 Load(8330) ->  115 Load(8430) ->  112 Load(8530) ->  113 Load(8630) ->  219 Load(8680) ->  378 Load(8780) ->  228 Load(8880) ->  372 Load(8930) ->  537 Load(9030) ->  608 Load(9080) ->  514 Load(9180) ->  217 Load(9280) ->  31 Load(9330) ->  28 Load(9380) ->  29 Load(9430) ->  34 Load(9480) ->  35 Load(9580) ->  36 Load(9630) ->  37 Load(9680) ->  218 Load(9780) ->  0 Load(9780)
Distance of the route: 16817m
Load of the route: 9780

Route for vehicle 644:
 0 Load(0) ->  540 Load(50) ->  271 Load(100) ->  302 Load(200) ->  270 Load(250) ->  290 Load(300) ->  291 Load(330) ->  301 Load(360) ->  295 Load(390) ->  294 Load(440) ->  639 Load(490) ->  292 Load(520) ->  276 Load(620) ->  293 Load(670) ->  1 Load(770) ->  212 Load(820) ->  207 Load(920) ->  208 Load(1020) ->  162 Load(1070) ->  557 Load(1120) ->  328 Load(1170) ->  327 Load(1270) ->  329 Load(1370) ->  330 Load(1470) ->  596 Load(1520) ->  400 Load(1620) ->  595 Load(1670) ->  511 Load(1720) ->  236 Load(1770) ->  399 Load(1820) ->  398 Load(1920) ->  460 Load(2020) ->  249 Load(2120) ->  451 Load(2220) ->  241 Load(2320) ->  502 Load(2370) ->  594 Load(2420) ->  503 Load(2470) ->  494 Load(2570) ->  507 Load(2620) ->  553 Load(2720) ->  308 Load(2820) ->  309 Load(2870) ->  390 Load(2970) ->  304 Load(3070) ->  477 Load(3170) ->  299 Load(3270) ->  300 Load(3370) ->  478 Load(3470) ->  611 Load(3570) ->  273 Load(3670) ->  261 Load(3770) ->  263 Load(3870) ->  272 Load(3920) ->  260 Load(4020) ->  262 Load(4120) ->  264 Load(4220) ->  265 Load(4320) ->  267 Load(4420) ->  266 Load(4520) ->  268 Load(4620) ->  269 Load(4720) ->  256 Load(4820) ->  257 Load(4920) ->  258 Load(4970) ->  259 Load(5070) ->  359 Load(5170) ->  335 Load(5220) ->  326 Load(5320) ->  610 Load(5370) ->  556 Load(5420) ->  324 Load(5470) ->  325 Load(5520) ->  320 Load(5620) ->  319 Load(5670) ->  196 Load(5770) ->  339 Load(5870) ->  588 Load(5970) ->  351 Load(6020) ->  350 Load(6070) ->  348 Load(6170) ->  349 Load(6200) ->  347 Load(6250) ->  346 Load(6300) ->  340 Load(6400) ->  197 Load(6500) ->  345 Load(6530) ->  344 Load(6630) ->  342 Load(6680) ->  343 Load(6730) ->  341 Load(6780) ->  337 Load(6830) ->  338 Load(6930) ->  332 Load(6980) ->  561 Load(7030) ->  331 Load(7130) ->  191 Load(7230) ->  313 Load(7280) ->  555 Load(7330) ->  163 Load(7380) ->  559 Load(7430) ->  311 Load(7530) ->  312 Load(7580) ->  194 Load(7630) ->  310 Load(7730) ->  315 Load(7830) ->  316 Load(7880) ->  200 Load(7980) ->  317 Load(8030) ->  318 Load(8080) ->  192 Load(8130) ->  323 Load(8180) ->  322 Load(8230) ->  321 Load(8280) ->  614 Load(8330) ->  615 Load(8380) ->  616 Load(8430) ->  613 Load(8480) ->  391 Load(8580) ->  369 Load(8680) ->  227 Load(8730) ->  368 Load(8830) ->  229 Load(8930) ->  367 Load(9030) ->  597 Load(9080) ->  356 Load(9180) ->  582 Load(9230) ->  0 Load(9230)
Distance of the route: 30055m
Load of the route: 9230

Route for vehicle 645:
 0 Load(0) ->  287 Load(100) ->  286 Load(200) ->  469 Load(250) ->  642 Load(300) ->  587 Load(350) ->  641 Load(400) ->  626 Load(500) ->  533 Load(550) ->  630 Load(650) ->  635 Load(750) ->  636 Load(800) ->  624 Load(900) ->  621 Load(1000) ->  486 Load(1100) ->  483 Load(1200) ->  481 Load(1300) ->  619 Load(1400) ->  484 Load(1500) ->  617 Load(1600) ->  482 Load(1700) ->  480 Load(1800) ->  479 Load(1900) ->  646 Load(2000) ->  164 Load(2050) ->  545 Load(2150) ->  146 Load(2250) ->  151 Load(2350) ->  152 Load(2450) ->  160 Load(2500) ->  153 Load(2600) ->  154 Load(2650) ->  155 Load(2750) ->  156 Load(2800) ->  158 Load(2850) ->  159 Load(2900) ->  103 Load(2950) ->  145 Load(3050) ->  144 Load(3150) ->  169 Load(3250) ->  143 Load(3350) ->  142 Load(3450) ->  576 Load(3550) ->  2 Load(3650) ->  577 Load(3700) ->  523 Load(3730) ->  633 Load(3780) ->  394 Load(3880) ->  239 Load(3930) ->  431 Load(3980) ->  432 Load(4030) ->  362 Load(4130) ->  461 Load(4180) ->  363 Load(4280) ->  426 Load(4330) ->  274 Load(4380) ->  419 Load(4430) ->  418 Load(4480) ->  388 Load(4580) ->  428 Load(4680) ->  429 Load(4780) ->  612 Load(4830) ->  466 Load(4880) ->  467 Load(4910) ->  447 Load(4960) ->  457 Load(5010) ->  424 Load(5110) ->  423 Load(5210) ->  455 Load(5260) ->  589 Load(5360) ->  427 Load(5460) ->  450 Load(5510) ->  242 Load(5610) ->  173 Load(5710) ->  552 Load(5760) ->  240 Load(5860) ->  470 Load(5910) ->  433 Load(5960) ->  462 Load(5990) ->  409 Load(6040) ->  408 Load(6140) ->  410 Load(6190) ->  411 Load(6240) ->  407 Load(6290) ->  406 Load(6340) ->  459 Load(6390) ->  458 Load(6440) ->  235 Load(6490) ->  443 Load(6540) ->  383 Load(6590) ->  422 Load(6640) ->  421 Load(6690) ->  387 Load(6740) ->  468 Load(6790) ->  430 Load(6840) ->  370 Load(6940) ->  448 Load(6990) ->  382 Load(7040) ->  440 Load(7090) ->  371 Load(7190) ->  441 Load(7220) ->  373 Load(7320) ->  449 Load(7370) ->  381 Load(7420) ->  442 Load(7450) ->  386 Load(7500) ->  439 Load(7550) ->  438 Load(7600) ->  436 Load(7650) ->  437 Load(7700) ->  471 Load(7750) ->  435 Load(7800) ->  444 Load(7850) ->  446 Load(7900) ->  445 Load(7950) ->  434 Load(8000) ->  414 Load(8050) ->  415 Load(8100) ->  233 Load(8200) ->  402 Load(8250) ->  403 Load(8300) ->  472 Load(8350) ->  401 Load(8400) ->  396 Load(8500) ->  393 Load(8600) ->  397 Load(8650) ->  246 Load(8700) ->  404 Load(8750) ->  473 Load(8800) ->  405 Load(8850) ->  243 Load(8950) ->  379 Load(9050) ->  232 Load(9150) ->  384 Load(9200) ->  275 Load(9300) ->  380 Load(9400) ->  606 Load(9450) ->  375 Load(9550) ->  374 Load(9650) ->  512 Load(9680) ->  64 Load(9710) ->  578 Load(9810) ->  603 Load(9860) ->  357 Load(9960) ->  0 Load(9960)
Distance of the route: 18586m
Load of the route: 9960

Route for vehicle 646:
 0 Load(0) ->  585 Load(50) ->  3 Load(100) ->  99 Load(200) ->  100 Load(250) ->  110 Load(350) ->  111 Load(450) ->  114 Load(550) ->  141 Load(650) ->  581 Load(700) ->  84 Load(800) ->  83 Load(850) ->  87 Load(950) ->  139 Load(1050) ->  25 Load(1150) ->  24 Load(1250) ->  23 Load(1350) ->  30 Load(1400) ->  27 Load(1500) ->  26 Load(1600) ->  14 Load(1700) ->  15 Load(1800) ->  20 Load(1850) ->  19 Load(1950) ->  16 Load(2000) ->  17 Load(2050) ->  18 Load(2150) ->  216 Load(2200) ->  129 Load(2300) ->  565 Load(2400) ->  138 Load(2430) ->  136 Load(2530) ->  121 Load(2580) ->  123 Load(2630) ->  63 Load(2680) ->  579 Load(2780) ->  50 Load(2830) ->  57 Load(2880) ->  60 Load(2930) ->  575 Load(2980) ->  49 Load(3030) ->  118 Load(3130) ->  119 Load(3230) ->  116 Load(3330) ->  206 Load(3430) ->  135 Load(3480) ->  131 Load(3580) ->  140 Load(3680) ->  254 Load(3780) ->  166 Load(3880) ->  543 Load(3930) ->  544 Load(3960) ->  161 Load(4010) ->  165 Load(4060) ->  147 Load(4160) ->  148 Load(4260) ->  149 Load(4310) ->  167 Load(4410) ->  150 Load(4510) ->  168 Load(4610) ->  366 Load(4710) ->  307 Load(4760) ->  306 Load(4810) ->  255 Load(4910) ->  542 Load(4960) ->  464 Load(5010) ->  221 Load(5110) ->  513 Load(5210) ->  225 Load(5310) ->  475 Load(5360) ->  599 Load(5410) ->  389 Load(5510) ->  463 Load(5560) ->  377 Load(5660) ->  376 Load(5760) ->  605 Load(5810) ->  392 Load(5910) ->  476 Load(6010) ->  305 Load(6110) ->  547 Load(6160) ->  157 Load(6260) ->  361 Load(6360) ->  506 Load(6410) ->  504 Load(6460) ->  365 Load(6560) ->  501 Load(6660) ->  360 Load(6760) ->  499 Load(6860) ->  253 Load(6960) ->  498 Load(7010) ->  252 Load(7110) ->  567 Load(7160) ->  250 Load(7260) ->  497 Load(7310) ->  314 Load(7360) ->  496 Load(7410) ->  303 Load(7510) ->  493 Load(7560) ->  500 Load(7610) ->  251 Load(7710) ->  492 Load(7760) ->  248 Load(7860) ->  491 Load(7910) ->  247 Load(8010) ->  490 Load(8110) ->  489 Load(8210) ->  245 Load(8310) ->  488 Load(8410) ->  532 Load(8510) ->  623 Load(8610) ->  524 Load(8710) ->  627 Load(8760) ->  526 Load(8810) ->  527 Load(8910) ->  528 Load(9010) ->  529 Load(9060) ->  530 Load(9110) ->  487 Load(9210) ->  531 Load(9260) ->  628 Load(9360) ->  296 Load(9410) ->  644 Load(9510) ->  0 Load(9510)
Distance of the route: 17217m
Load of the route: 9510

Total distance of all routes: 109416m
Total load of all routes: 47020
[Finished in 63.359s]

--------------------------------------------------------------------------

From 139031m to 109416m. So the solution does improve someone. An integration curve would be interesting.

Okay, let's go back and investigate WHY getting the distances from arc directly in distance callback causes or-tools not to register the distance.
Remember, this is what the buggy distance callback looks like:

    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        print("from_node -> to_node: {} -> {} ".format(from_node, to_node))
        if from_node == to_node:
            distance = 0
            print("from_node = to_node, distance 0")
        else:
            distance = (vrp_instance.arcs[from_node][to_node]).distance
            print("extracted from arcs, distance" + distance)
        return distance

Which outputs:
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.capacity = 30
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
[[ 0.         13.92838828  9.8488578   1.          8.54400375 10.77032961]
 [13.92838828  0.          9.8488578  13.60147051 10.44030651  3.16227766]
 [ 9.8488578   9.8488578   0.          8.94427191  1.41421356  7.81024968]
 [ 1.         13.60147051  8.94427191  0.          7.61577311 10.44030651]
 [ 8.54400375 10.44030651  1.41421356  7.61577311  0.          8.06225775]
 [10.77032961  3.16227766  7.81024968 10.44030651  8.06225775  0.        ]]
from_node -> to_node: 0 -> 0
from_node = to_node, distance 0
from_node -> to_node: 0 -> 0
from_node = to_node, distance 0
from_node -> to_node: 0 -> 0
from_node = to_node, distance 0
from_node -> to_node: 0 -> 0
from_node = to_node, distance 0
from_node -> to_node: 0 -> 0
from_node = to_node, distance 0
from_node -> to_node: 1 -> 0
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 4:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 5:
 0 Load(0) ->  5 Load(25) ->  4 Load(45) ->  3 Load(60) ->  2 Load(75) ->  1 Load(80) ->  0 Load(80)
Distance of the route: 0m
Load of the route: 80

Total distance of all routes: 0m
Total load of all routes: 80
[Finished in 1.628s]

--------------------------------------------------------------------------

I tried swapping around the if statement, to no effect.

    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        print("from_node -> to_node: {} -> {} ".format(from_node, to_node))
        if from_node == to_node:
            distance = (vrp_instance.arcs[from_node][to_node]).distance
            print("extracted from arcs, distance" + distance)
        else:
            distance = 0
            print("from_node = to_node, distance 0")
        return distance

According to this discussion, callbacks are cached and called asynchronously.
https://groups.google.com/g/or-tools-discuss/c/8DPt3lzE_oE/m/YjEZ4fu7BwAJ

I give up. We'll just store distance_matrix = get_distance_matrix() in main and make the distance callback pull from there.
I'll come back and deal with the whys if anything stuffs up later.

Moving on. I want to write the solutions to file.

First, I gotta figure out what solution format to use.
A few options:

Groer: 31 -21 31 19 17 13 7 26 -12 1 16 30 -27 24 -29 18 8 9 22 15 10 25 5 20 -14 28 11 4 23 3 2 6 0
(-ves indicate return to depot)

Unknown:
Route #1: 582 459 436 181 42 34 368 235 390 57 425
.
Route #87: 812 801 787 289 385 357 302 740 332 64 315
Cost 85469

VRP-REP: XML schema
CVRPLIB: Umkown or
7591 (upper bound val)
26 (num vehicles)
113340 (?)
6780 (?)
 0 1 1 783 191  5 0 31 46 35 0
1 1 1 distance load num_nodes(incd. depot twice) 0 node_id ...node_id 0
.
 0 1 1 897 201  8 0 24 95 73 53 33 32 0


 Groer doesn't give the distance, I just want a .txt file so VRP-REP sounds like a pain in the ass.
 I don't know what some of the numbers mean in the CVRPLIB format, so let's just go with the Unknown format that CVRPLIB also sometime uses. I can always change the format later. The solution file will have the same name as the problem, so it doesn't need all the problem info anyway.

    def write_solution_file(vrp_instance, num_vehicles, manager, routing, solution):
        """Writes solution to file."""
        num_routes = 0
        output = ''
        for vehicle_id in range(num_vehicles):
            index = routing.Start(vehicle_id)
            node_sequence = ''
            route_distance = 0
            route_load = 0
            index = solution.Value(routing.NextVar(index))
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                route_load += vrp_instance.get_demands()[node_index]
                node_sequence += ' {}'.format(node_index)
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                route_distance += routing.GetArcCostForVehicle(
                    previous_index, index, vehicle_id)
            if route_distance != 0:
                num_routes += 1
                route_line = 'Route #{}:'.format(num_routes)
                # route_line += ' {}'.format(route_distance)
                # route_line += ' {}'.format(route_load)
                route_line += node_sequence + "\n"
                output += route_lin
        objective_val = solution.ObjectiveValue()
        output += 'Cost {}'.format(objective_val)
        file_name = vrp_instance.name
        print(file_name)
        solution_file = open("C:/Users/jc321076/github/" + file_name + "ortools.sol", mode='w')  # Create solution file (specify path file here)
        solution_file.write(output)
        solution_file.close()

The function is based on print_solution with some modifications.
I test it on Andersen_n8, X_n101_k25, and BOPMid_full_matrix; all work.
As an example, I've copied the contents of Andersen_n8.sol :
--------------------------------------------------------------------------

Route #1: 1 5
Route #2: 4
Route #3: 3 2
Cost 60

--------------------------------------------------------------------------


Okay, next I want to modify external_data_routing.py to solve VRPs with both load AND fuel capacities.
I refer to get_capacitated_fuel_weed_instance_working_tests.txt as a basis.

  def fuel_callback(from_index, to_index):
      from_node = manager.IndexToNode(from_index)
      to_node = manager.IndexToNode(to_index)
      distance = distance_matrix[from_node][to_node]
      fuel = vrp_instance.vehicle.fuel_consumption * distance
      print(fuel)
      return int(fuel)

  fuel_callback_index = routing.RegisterUnaryTransitCallback(fuel_callback)
  routing.AddDimension(
      fuel_callback_index,
      int(0),
      vehicle_fuel_capacity,
      True,
      'Fuel')

Which gives:
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.demand_capacity = 30
Vehicle.fuel_capacity = 18
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
18
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
Distance of the route: 0m
Load of the route: 30

Route for vehicle 4:
 0 Load(0) ->  4 Load(20) ->  0 Load(20)
Distance of the route: 0m
Load of the route: 20

Route for vehicle 5:
 0 Load(0) ->  5 Load(25) ->  1 Load(30) ->  0 Load(30)
Distance of the route: 0m
Load of the route: 30

Total distance of all routes: 0m
Total load of all routes: 80
[Finished in 1.724s]

--------------------------------------------------------------------------


Gahh it's doing the 0m distance thing again!!

Ah. The fuel_callback has two inputs, so it shouldn't be RegisterUnaryTransitCallback (I think?). I tried:

  fuel_callback_index = routing.RegisterTransitCallback(fuel_callback)

And:
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.demand_capacity = 30
Vehicle.fuel_capacity = 18
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
18
Solver status:  2
[Finished in 0.491s]

--------------------------------------------------------------------------


No solution. Hm.
The original solution had 3 routes, distances 26, 16, 18m.
The default fuel_capacity is 18L, at fuel_consumption of 1L/m
Maybe the fuel_capacity isn't high enough for a valid solution.
I manually increase it to a value higher than 26:

    vehicle_fuel_capacity = 30

And run again:
--------------------------------------------------------------------------
NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.demand_capacity = 30
Vehicle.fuel_capacity = 30
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
30
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  5 Load(25) ->  1 Load(30) ->  0 Load(30)
Distance of the route: 26m
Load of the route: 30

Route for vehicle 4:
 0 Load(0) ->  4 Load(20) ->  0 Load(20)
Distance of the route: 16m
Load of the route: 20

Route for vehicle 5:
 0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
Distance of the route: 18m
Load of the route: 30

Total distance of all routes: 60m
Total load of all routes: 80
[Finished in 0.403s]

--------------------------------------------------------------------------

Yup it worked!
Now let's reduce the fuel capacity to see a change in the solution, but still keeps feasibility:

    vehicle_fuel_capacity = 25

Hopefully.
--------------------------------------------------------------------------
NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.demand_capacity = 30
Vehicle.fuel_capacity = 25
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
Solver status:  2
[Finished in 0.622s]
--------------------------------------------------------------------------


Hup. Nope!
Let's try with X_n101_k25.
First, we set fuel_capacity to be higher than any of the route distances of the previous solution:

    vrp_instance.vehicle.fuel_capacity = 2000

Which gives:
--------------------------------------------------------------------------
NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

DEMAND_SECTION

name = X-n101-k25
Vehicle.demand_capacity = 206
Vehicle.fuel_capacity = 2000
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [365, 689]
nodes in instance, including depot: 101
arcs in instance: 10100
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  63 Load(65) ->  42 Load(141) ->  28 Load(173) ->  14 Load(200) ->  0 Load(200)
Distance of the route: 1059m
Load of the route: 200

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0
.
.
Route for vehicle 73:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 74:
 0 Load(0) ->  64 Load(3) ->  87 Load(5) ->  36 Load(102) ->  45 Load(116) ->  2 Load(167) ->  78 Load(206) ->  0 Load(206)
Distance of the route: 1881m
Load of the route: 206

Route for vehicle 75:
 0 Load(0) ->  76 Load(6) ->  55 Load(78) ->  16 Load(175) ->  69 Load(203) ->  0 Load(203)
Distance of the route: 1361m
Load of the route: 203

Route for vehicle 76:
 0 Load(0) ->  38 Load(32) ->  47 Load(43) ->  89 Load(61) ->  98 Load(112) ->  99 Load(190) ->  0 Load(190)
Distance of the route: 1608m
Load of the route: 190

Route for vehicle 77:
 0 Load(0) ->  74 Load(73) ->  13 Load(119) ->  7 Load(120) ->  49 Load(173) ->  65 Load(178) ->  39 Load(205) ->  0 Load(205)
Distance of the route: 1832m
Load of the route: 205

Route for vehicle 78:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1342m
Load of the route: 203

Route for vehicle 79:
 0 Load(0) ->  52 Load(87) ->  83 Load(183) ->  0 Load(183)
Distance of the route: 1122m
Load of the route: 183

Route for vehicle 80:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1455m
Load of the route: 201

Route for vehicle 81:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1203m
Load of the route: 196

Route for vehicle 82:
 0 Load(0) ->  100 Load(35) ->  27 Load(122) ->  91 Load(197) ->  0 Load(197)
Distance of the route: 950m
Load of the route: 197

Route for vehicle 83:
 0 Load(0) ->  26 Load(18) ->  48 Load(111) ->  43 Load(126) ->  29 Load(130) ->  37 Load(200) ->  0 Load(200)
Distance of the route: 1723m
Load of the route: 200

Route for vehicle 84:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  6 Load(205) ->  0 Load(205)
Distance of the route: 1313m
Load of the route: 205

Route for vehicle 85:
 0 Load(0) ->  34 Load(5) ->  3 Load(78) ->  96 Load(118) ->  72 Load(134) ->  57 Load(142) ->  77 Load(206) ->  0 Load(206)
Distance of the route: 1033m
Load of the route: 206

Route for vehicle 86:
 0 Load(0) ->  81 Load(14) ->  51 Load(94) ->  71 Load(112) ->  62 Load(150) ->  97 Load(198) ->  0 Load(198)
Distance of the route: 1293m
Load of the route: 198

Route for vehicle 87:
 0 Load(0) ->  59 Load(55) ->  60 Load(122) ->  82 Load(205) ->  0 Load(205)
Distance of the route: 985m
Load of the route: 205

Route for vehicle 88:
 0 Load(0) ->  40 Load(42) ->  88 Load(63) ->  67 Load(163) ->  44 Load(202) ->  0 Load(202)
Distance of the route: 887m
Load of the route: 202

Route for vehicle 89:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  0 Load(151)
Distance of the route: 860m
Load of the route: 151

Route for vehicle 90:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 836m
Load of the route: 205

Route for vehicle 91:
 0 Load(0) ->  8 Load(98) ->  80 Load(168) ->  0 Load(168)
Distance of the route: 548m
Load of the route: 168

Route for vehicle 92:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 805m
Load of the route: 191

Route for vehicle 93:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 840m
Load of the route: 199

Route for vehicle 94:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 95:
 0 Load(0) ->  21 Load(23) ->  61 Load(112) ->  23 Load(178) ->  0 Load(178)
Distance of the route: 597m
Load of the route: 178

Route for vehicle 96:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  19 Load(160) ->  50 Load(204) ->  0 Load(204)
Distance of the route: 795m
Load of the route: 204

Route for vehicle 97:
 0 Load(0) ->  17 Load(74) ->  94 Load(135) ->  56 Load(185) ->  0 Load(185)
Distance of the route: 699m
Load of the route: 185

Route for vehicle 98:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  58 Load(202) ->  0 Load(202)
Distance of the route: 602m
Load of the route: 202

Route for vehicle 99:
 0 Load(0) ->  79 Load(86) ->  0 Load(86)
Distance of the route: 312m
Load of the route: 86

Route for vehicle 100:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 889m
Load of the route: 178

Total distance of all routes: 28830m
Total load of all routes: 5147
[Finished in 1.485s]

--------------------------------------------------------------------------


Let's see...the longest route is 1881m. Let's set the fuel capacity to be be just under that:

    vrp_instance.vehicle.fuel_capacity = 1800

That particular route should now be forced to drop a customer:
--------------------------------------------------------------------------
NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

DEMAND_SECTION

name = X-n101-k25
Vehicle.demand_capacity = 206
Vehicle.fuel_capacity = 1800
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [365, 689]
nodes in instance, including depot: 101
arcs in instance: 10100
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  56 Load(50) ->  26 Load(68) ->  47 Load(79) ->  38 Load(111) ->  27 Load(198) ->  0 Load(198)
Distance of the route: 1285m
Load of the route: 198

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 72:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 73:
 0 Load(0) ->  78 Load(39) ->  49 Load(92) ->  45 Load(106) ->  36 Load(203) ->  0 Load(203)
Distance of the route: 1787m
Load of the route: 203

Route for vehicle 74:
 0 Load(0) ->  42 Load(76) ->  37 Load(146) ->  2 Load(197) ->  7 Load(198) ->  0 Load(198)
Distance of the route: 1730m
Load of the route: 198

Route for vehicle 75:
 0 Load(0) ->  76 Load(6) ->  16 Load(103) ->  55 Load(175) ->  0 Load(175)
Distance of the route: 1340m
Load of the route: 175

Route for vehicle 76:
 0 Load(0) ->  71 Load(18) ->  62 Load(56) ->  99 Load(134) ->  98 Load(185) ->  89 Load(203) ->  0 Load(203)
Distance of the route: 1468m
Load of the route: 203

Route for vehicle 77:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1342m
Load of the route: 203

Route for vehicle 78:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1455m
Load of the route: 201

Route for vehicle 79:
 0 Load(0) ->  81 Load(14) ->  51 Load(94) ->  83 Load(190) ->  0 Load(190)
Distance of the route: 1177m
Load of the route: 190

Route for vehicle 80:
 0 Load(0) ->  13 Load(46) ->  74 Load(119) ->  69 Load(147) ->  90 Load(202) ->  0 Load(202)
Distance of the route: 1363m
Load of the route: 202

Route for vehicle 81:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  68 Load(141) ->  5 Load(199) ->  0 Load(199)
Distance of the route: 1180m
Load of the route: 199

Route for vehicle 82:
 0 Load(0) ->  14 Load(27) ->  28 Load(59) ->  57 Load(67) ->  72 Load(83) ->  87 Load(85) ->  48 Load(178) ->  0 Load(178)
Distance of the route: 1259m
Load of the route: 178

Route for vehicle 83:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 84:
 0 Load(0) ->  10 Load(98) ->  65 Load(103) ->  6 Load(157) ->  29 Load(161) ->  43 Load(176) ->  88 Load(197) ->  0 Load(197)
Distance of the route: 1650m
Load of the route: 197

Route for vehicle 85:
 0 Load(0) ->  39 Load(27) ->  25 Load(80) ->  63 Load(145) ->  44 Load(184) ->  0 Load(184)
Distance of the route: 956m
Load of the route: 184

Route for vehicle 86:
 0 Load(0) ->  100 Load(35) ->  52 Load(122) ->  91 Load(197) ->  0 Load(197)
Distance of the route: 1051m
Load of the route: 197

Route for vehicle 87:
 0 Load(0) ->  59 Load(55) ->  60 Load(122) ->  82 Load(205) ->  0 Load(205)
Distance of the route: 985m
Load of the route: 205

Route for vehicle 88:
 0 Load(0) ->  40 Load(42) ->  67 Load(142) ->  77 Load(206) ->  0 Load(206)
Distance of the route: 904m
Load of the route: 206

Route for vehicle 89:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  0 Load(151)
Distance of the route: 860m
Load of the route: 151

Route for vehicle 90:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 836m
Load of the route: 205

Route for vehicle 91:
 0 Load(0) ->  94 Load(61) ->  96 Load(101) ->  3 Load(174) ->  64 Load(177) ->  34 Load(182) ->  0 Load(182)
Distance of the route: 802m
Load of the route: 182

Route for vehicle 92:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 805m
Load of the route: 191

Route for vehicle 93:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 840m
Load of the route: 199

Route for vehicle 94:
 0 Load(0) ->  8 Load(98) ->  17 Load(172) ->  0 Load(172)
Distance of the route: 549m
Load of the route: 172

Route for vehicle 95:
 0 Load(0) ->  80 Load(70) ->  23 Load(136) ->  19 Load(198) ->  0 Load(198)
Distance of the route: 803m
Load of the route: 198

Route for vehicle 96:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 97:
 0 Load(0) ->  21 Load(23) ->  61 Load(112) ->  97 Load(160) ->  50 Load(204) ->  0 Load(204)
Distance of the route: 760m
Load of the route: 204

Route for vehicle 98:
 0 Load(0) ->  12 Load(86) ->  58 Load(144) ->  0 Load(144)
Distance of the route: 517m
Load of the route: 144

Route for vehicle 99:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 666m
Load of the route: 184

Route for vehicle 100:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 889m
Load of the route: 178

Total distance of all routes: 29259m
Total load of all routes: 5147
[Finished in 1.722s]

--------------------------------------------------------------------------

Not only has it dropped a customer, a lot of routes have been shuffled around.
There are no routes in this new solution with a distance greater than 1800, so the fuel capacity constraint works.

Let's try solving the real world weed problem now.
I set demand_capacity = 10000 and fuel_capacity = 40000
Time limit = 300 seconds.
--------------------------------------------------------------------------

NAME: BOPMid_full_matrix

TYPE: CVRP

COMMENT: Stands for "Birds Of Prey Mid-paddock", describing the drone-surveyed area at which said birds tried to take down survey drone. Located at Redlands Park, McKinlay, QLD, Australia. Collected by Tiria Andersen, see Honours Thesis.

DIMENSION: 647

CAPACITY: 80000

EDGE_WEIGHT_TYPE: EXPLICIT

EDGE_WEIGHT_FORMAT: FULL_MATRIX

NODE_COORD_TYPE: TWOD_COORDS

DEMAND_SECTION

name = BOPMid_full_matrix
Vehicle.demand_capacity = 10000
Vehicle.fuel_capacity = 40000
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 647
arcs in instance: 417962
[[    0.    1362.13  1257.11 ...     0.   36605.84 30021.17]
 [ 1362.13     0.     591.42 ...     0.   35188.69 29549.85]
 [ 1257.11   591.42     0.   ... 24497.06 35036.61 28803.41]
 ...
 [    0.       0.   24497.06 ...     0.   19515.43 29337.72]
 [36605.84 35188.69 35036.61 ... 19515.43     0.   18250.97]
 [30021.17 29549.85 28803.41 ... 29337.72 18250.97     0.  ]]
Solver status:  3
[Finished in 301.95s

--------------------------------------------------------------------------

Gah it timed out. How annoying.
I'll try a solution limit instead.

    search_parameters.solution_limit = 1

Well, that took 10 minutes, so I gave up.
--------------------------------------------------------------------------



--------------------------------------------------------------------------


--------------------------------------------------------------------------

I'm putting in a check:

if solution:
    print_solution(vrp_instance, num_vehicles, manager, routing, solution)
elif routing.status() == 2:
    # Check if fuel capacity is less than route to one node.
    for i in range(dim):
        route_distance = 2 * distance_matrix[0][i]
        if vehicle_fuel_capacity < route_distance:
            print("fuel capacity {} < {} route distance")

And run Andersen_n8 with fuel_capacity = 25, which I know doesn't have a solution and will spit out solver status 2:
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.demand_capacity = 30
Vehicle.fuel_capacity = 25
Vehicle.fuel_consumption = 1
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
[[ 0.         13.92838828  9.8488578   1.          8.54400375 10.77032961]
 [13.92838828  0.          9.8488578  13.60147051 10.44030651  3.16227766]
 [ 9.8488578   9.8488578   0.          8.94427191  1.41421356  7.81024968]
 [ 1.         13.60147051  8.94427191  0.          7.61577311 10.44030651]
 [ 8.54400375 10.44030651  1.41421356  7.61577311  0.          8.06225775]
 [10.77032961  3.16227766  7.81024968 10.44030651  8.06225775  0.        ]]
Solver status:  2
fuel capacity 25 < 27.85677655436824 route distance, containing node 1
[Finished in 0.549s]

--------------------------------------------------------------------------

Yup, worked good.
I've noticed that the original solution route containing node 1 is 26m, but the print statement above states that the route distance to just node 1 is over 27m.
I'm guessing the lack of scaling produced this inequality.

I also went back and enabled fuel_consumption = 0.08, as opposed to an integer by modifying the callback:

    def fuel_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        distance = distance_matrix[from_node][to_node]
        fuel = vrp_instance.vehicle.fuel_consumption * distance
        fuel = np.ceil(fuel)  # It's safter to overestimate than underestimate fuel usage when there is a capacity constraint.
        return fuel

With a fuel_capacity = 144, so (144/0.08 = 1800) the solution should be the same as the previous one with a 1800 fuel capacity.
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

DEMAND_SECTION

name = X-n101-k25
Vehicle.demand_capacity = 206
Vehicle.fuel_capacity = 144
Vehicle.fuel_consumption = 0.08
Depot.id = 0
Depot.location = [365, 689]
nodes in instance, including depot: 101
arcs in instance: 10100
Solver status:  1
Route for vehicle 0:
 0 Load(0) ->  56 Load(50) ->  26 Load(68) ->  47 Load(79) ->  38 Load(111) ->  27 Load(198) ->  0 Load(198)
Distance of the route: 1285m
Load of the route: 198

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0
.
.
Route for vehicle 72:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 73:
 0 Load(0) ->  37 Load(70) ->  36 Load(167) ->  45 Load(181) ->  0 Load(181)
Distance of the route: 1778m
Load of the route: 181

Route for vehicle 74:
 0 Load(0) ->  25 Load(53) ->  65 Load(58) ->  78 Load(97) ->  49 Load(150) ->  2 Load(201) ->  7 Load(202) ->  0 Load(202)
Distance of the route: 1661m
Load of the route: 202

Route for vehicle 75:
 0 Load(0) ->  76 Load(6) ->  16 Load(103) ->  55 Load(175) ->  0 Load(175)
Distance of the route: 1340m
Load of the route: 175

Route for vehicle 76:
 0 Load(0) ->  71 Load(18) ->  62 Load(56) ->  99 Load(134) ->  98 Load(185) ->  89 Load(203) ->  0 Load(203)
Distance of the route: 1468m
Load of the route: 203

Route for vehicle 77:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1342m
Load of the route: 203

Route for vehicle 78:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1455m
Load of the route: 201

Route for vehicle 79:
 0 Load(0) ->  81 Load(14) ->  51 Load(94) ->  83 Load(190) ->  0 Load(190)
Distance of the route: 1177m
Load of the route: 190

Route for vehicle 80:
 0 Load(0) ->  13 Load(46) ->  74 Load(119) ->  69 Load(147) ->  90 Load(202) ->  0 Load(202)
Distance of the route: 1363m
Load of the route: 202

Route for vehicle 81:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  68 Load(141) ->  5 Load(199) ->  0 Load(199)
Distance of the route: 1180m
Load of the route: 199

Route for vehicle 82:
 0 Load(0) ->  77 Load(64) ->  14 Load(91) ->  72 Load(107) ->  87 Load(109) ->  48 Load(202) ->  0 Load(202)
Distance of the route: 1253m
Load of the route: 202

Route for vehicle 83:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 84:
 0 Load(0) ->  39 Load(27) ->  42 Load(103) ->  6 Load(157) ->  29 Load(161) ->  43 Load(176) ->  57 Load(184) ->  88 Load(205) ->  0 Load(205)
Distance of the route: 1642m
Load of the route: 205

Route for vehicle 85:
 0 Load(0) ->  10 Load(98) ->  28 Load(130) ->  63 Load(195) ->  0 Load(195)
Distance of the route: 1011m
Load of the route: 195

Route for vehicle 86:
 0 Load(0) ->  100 Load(35) ->  52 Load(122) ->  91 Load(197) ->  0 Load(197)
Distance of the route: 1051m
Load of the route: 197

Route for vehicle 87:
 0 Load(0) ->  59 Load(55) ->  60 Load(122) ->  82 Load(205) ->  0 Load(205)
Distance of the route: 985m
Load of the route: 205

Route for vehicle 88:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 89:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  44 Load(190) ->  0 Load(190)
Distance of the route: 990m
Load of the route: 190

Route for vehicle 90:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 836m
Load of the route: 205

Route for vehicle 91:
 0 Load(0) ->  8 Load(98) ->  3 Load(171) ->  64 Load(174) ->  0 Load(174)
Distance of the route: 728m
Load of the route: 174

Route for vehicle 92:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 805m
Load of the route: 191

Route for vehicle 93:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 840m
Load of the route: 199

Route for vehicle 94:
 0 Load(0) ->  94 Load(61) ->  96 Load(101) ->  67 Load(201) ->  0 Load(201)
Distance of the route: 959m
Load of the route: 201

Route for vehicle 95:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  34 Load(149) ->  40 Load(191) ->  0 Load(191)
Distance of the route: 700m
Load of the route: 191

Route for vehicle 96:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 574m
Load of the route: 172

Route for vehicle 97:
 0 Load(0) ->  21 Load(23) ->  61 Load(112) ->  97 Load(160) ->  0 Load(160)
Distance of the route: 734m
Load of the route: 160

Route for vehicle 98:
 0 Load(0) ->  12 Load(86) ->  58 Load(144) ->  0 Load(144)
Distance of the route: 517m
Load of the route: 144

Route for vehicle 99:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 666m
Load of the route: 184

Route for vehicle 100:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 889m
Load of the route: 178

Total distance of all routes: 29229m
Total load of all routes: 5147
[Finished in 1.861s]

--------------------------------------------------------------------------

Huh. The distance for this solution is 29229m, while the previous solution for fuel_capacity = 1800 is 29259m.
Weird this solution is better. Some routes are slightly different.
I had assumed that ceil(fuel) would be incrementally adding a lot more fuel consumption, using up the fuel capacity faster and forcing the solution to have shorter, inefficient routes.

I'm wondering if scaling will help.

    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        scaled_distance = 1000* distance_matrix[from_node][to_node]
        return scaled_distance

        NAME : Andersen_n8

        TYPE : CVRP

        DIMENSION : 8

        EDGE_WEIGHT_TYPE : EUC_2D

        CAPACITY : 30

        DEMAND_SECTION

        Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
        Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
        name = Andersen_n8
        Vehicle.demand_capacity = 30
        Vehicle.fuel_capacity = 30
        Vehicle.fuel_consumption = 0.08
        Depot.id = 0
        Depot.location = [0, 0]
        nodes in instance, including depot: 6
        arcs in instance: 30
        Solver status:  1
        Route for vehicle 0:
         0 Load(0) ->  0 Load(0)
        Distance of the route: 0m
        Load of the route: 0

        Route for vehicle 1:
         0 Load(0) ->  0 Load(0)
        Distance of the route: 0m
        Load of the route: 0

        Route for vehicle 2:
         0 Load(0) ->  0 Load(0)
        Distance of the route: 0m
        Load of the route: 0

        Route for vehicle 3:
         0 Load(0) ->  1 Load(5) ->  5 Load(30) ->  0 Load(30)
        Distance of the route: 27860m
        Load of the route: 30

        Route for vehicle 4:
         0 Load(0) ->  4 Load(20) ->  0 Load(20)
        Distance of the route: 17088m
        Load of the route: 20

        Route for vehicle 5:
         0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
        Distance of the route: 19792m
        Load of the route: 30

        Total distance of all routes: 64740m
        Total load of all routes: 80
        [Finished in 0.434s]
--------------------------------------------------------------------------

The distances are slightly more since accuracy has increased.
I will scale down at the printer, but there is no need to round to integers.

    scaled_route_distance = routing.GetArcCostForVehicle(
              previous_index, index, vehicle_id)
          route_distance += scaled_route_distance / 1000

And print out to 3 decimal places (since we scaled by 1000):
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

DEMAND_SECTION

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
name = Andersen_n8
Vehicle.demand_capacity = 30
Vehicle.fuel_capacity = 30
Vehicle.fuel_consumption = 0.08
Depot.id = 0
Depot.location = [0, 0]
nodes in instance, including depot: 6
arcs in instance: 30
Solver status:  1
Route for vehicle 3:
 0 Load(0) ->  1 Load(5) ->  5 Load(30) ->  0 Load(30)
Distance of the route: 27.86m
Load of the route: 30

Route for vehicle 4:
 0 Load(0) ->  4 Load(20) ->  0 Load(20)
Distance of the route: 17.088m
Load of the route: 20

Route for vehicle 5:
 0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
Distance of the route: 19.792m
Load of the route: 30

Total distance of all routes: 64.740m
Total load of all routes: 80
Total number of routes: 3
[Finished in 0.419s]

--------------------------------------------------------------------------

The total distance has a difference of 4.74m from the rounded solution of 60m.
I increase the scaling to 10,000 but the resulting total distance is 64.7418m so the accuracy doesn't improve that much.
I'll stick with a scaling of 1000.

I've created a variable for scaling:
    precision_scale = 1000
which is an argument for print_solution() and write_simple_solution_file().

I'm going to make an alternate solution format based on the CRVPLIB format.

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
