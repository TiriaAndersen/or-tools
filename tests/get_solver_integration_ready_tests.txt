Trying to make or-tools summonable by a higher level module (as in it uses or-tools as a sub-solver) in python.

This is  a log of command line inputs and outputs.
Each subsequent program is a duplicate of the previous, with some changes.

 As my basis CVRP program, I used the Python version of the complete program found here: https://developers.google.com/optimization/routing/cvrp
Technically the final product has two capacities - demand and vehicle fuel - but we only deal with demand for now.

First, let's check that python is working:
--------------------------------------------------------------------------
C:\Users\jc321076\github\or-tools>python tests/example_routing.py
Route for vehicle 0:
 0 ->  8 ->  6 ->  2 ->  5 -> 0
Distance of the route: 1552m

Route for vehicle 1:
 0 ->  7 ->  1 ->  4 ->  3 -> 0
Distance of the route: 1552m

Route for vehicle 2:
 0 ->  9 ->  10 ->  16 ->  14 -> 0
Distance of the route: 1552m

Route for vehicle 3:
 0 ->  12 ->  11 ->  15 ->  13 -> 0
Distance of the route: 1552m

Maximum of the route distances: 1552m

--------------------------------------------------------------------------


Okay, that works. Now, let's do the same but for the CVRP:
--------------------------------------------------------------------------
C:\Users\jc321076\github\or-tools>python tests/external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 1:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


Can we solve external_data_routing.py when located outside the or-tools folder?
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 1:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


Seems so! What if we move the file to a completely different location?
--------------------------------------------------------------------------
C:\Users\jc321076\Documents>python external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 1:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


Yup, seems to work! Okay, now I  want to summon both or-tools and VRPModelling in separate folder.
I moved external_data_routing.py back into the github folder that contains both or-tools and VRPModelling folders.
I changed the number for vehicles from 4 to 1:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py

C:\Users\jc321076\github>

--------------------------------------------------------------------------


It spend maybe 5 minutes running and did not produce anything.
It seems that or-tools doesn't by default understand "one vehicle making multiple routes".
For now, we can workaround it by having lots of dummy vehicles, each one representing a trip made by the single vehicle.

  data['vehicle_capacities'] = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15]  # TODO: make this dependent on num of vehicles for bandaid
    data['num_vehicles'] = 10  # larger number, higher than the number of routes

This won't work for a dynamic case, because events turn up on a timeline.
Anyway, I'll use the workaround for now and deal with it at the dynamic stage.
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  3 Load(7) ->  15 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  14 Load(4) ->  16 Load(12) ->  10 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 2192m
Load of the route: 15

Route for vehicle 3:
 0 Load(0) ->  7 Load(8) ->  13 Load(12) ->  12 Load(14) ->  11 Load(15) ->  0 Load(15)
Distance of the route: 1324m
Load of the route: 15

Route for vehicle 4:
 0 Load(0) ->  9 Load(1) ->  8 Load(9) ->  6 Load(13) ->  5 Load(15) ->  0 Load(15)
Distance of the route: 1164m
Load of the route: 15

Total distance of all routes: 6872m
Total load of all routes: 60

--------------------------------------------------------------------------


There is an extra empty route there, so I know there are enough dummy vehicles assigned.

Now, I want to import my VRPModeling classes into external_data_routing.py:

  from VRPModeling.Depot import Depot
  depot1 = Depot(0, [0, 0])
  print(depot1.__str__())

I comment out the print_solution() command so the output is less cluttered.
Running it:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Traceback (most recent call last):
  File "external_data_routing.py", line 8, in <module>
    from VRPModeling.Depot import Depot
  File "C:\Users\jc321076\github\VRPModeling\Depot.py", line 1, in <module>
    from Node import Node
ModuleNotFoundError: No module named 'Node'

--------------------------------------------------------------------------


So the issue isn't the first import, but the import line within Depoty.py, because it assumes Node.py is in the same folder, but external_data_routing.py doesn't know where Node.py is.
According to this stack overflow answer, we can use a relative reference to fix this:
https://stackoverflow.com/questions/40397851/python-cant-find-a-module-that-is-imported-in-another-module
I modify Depot.py in VRPModeling:

  from .Node import Node

And run again:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Depot.id = 0
Depot.location = [0, 0]
--------------------------------------------------------------------------


Excellent. I modify all imports in VRPModeling classes to a relative reference.
Then I create add more objects needed for a VRP instance (just the dummy instance found in VRPModeling's sandbox):

  from Vehicle import Vehicle
  vehicle1 = Vehicle(11, 0.8)
  print(vehicle1.__str__())

  from VRPInstance import VRPInstance
  vrp1 = VRPInstance(vehicle1, depot1)

  from Node import Node
  import random
  random.seed(7)
  for i in range(7):
      x = random.randrange(12)
      y = random.randrange(15)
      demand = random.randrange(5, 50, 5)
      vrp1.add_node([x, y], demand)
  print(vrp1.__str__())
  print(vrp1.nodes_details())

Running it:
--------------------------------------------------------------------------
C:\Users\jc321076\github>python external_data_routing.py
Depot.id = 0
Depot.location = [0, 0]
Vehicle.capacities = 11
Vehicle.variable_cost = 0.8
name = Andersen_n8
Vehicle.capacities = 11
Vehicle.variable_cost = 0.8
Depot.id = 0
Depot.location = [0, 0]
nodes in instance: 7
arcs in instance: 7
id    location    demand
1     [5, 2]      35
2     [10, 0]      10
3     [8, 1]      30
4     [9, 0]      45
5     [3, 0]      10
6     [6, 6]      10
7     [3, 1]      45

--------------------------------------------------------------------------


Now I want VRPModeling to spit out data that is digestible by or-tools.
I created a function called get_distance_matrix() in VRPInstance.
I want to store the distance matrix as a sparse matrix since not all nodes will necessarily have arcs connecting them.
I'm assuming that numpy's array is best for the job, but happy to change if not the case.

...I just realised that or-tools doesn't actually need a distance matrix.
It uses a distance callback - in the example program, it is defined as below:

  def distance_callback(from_index, to_index):
      """Returns the distance between the two nodes.
      Basically the way the system internally accesses the distance matrix
      """

      # Convert from routing variable Index to distance matrix NodeIndex.
      from_node = manager.IndexToNode(from_index)
      to_node = manager.IndexToNode(to_index)
      return data['distance_matrix'][from_node][to_node]

So I can redefine the distance callback to pull distances straight from VRPInstance's arcs list, instead from a distance matrix!
(I also refactored Node.id as an int, and arcs keys as the Node id)
The new redefinition:

  def distance_callback(from_index, to_index):
      """Returns the distance between the two nodes. Distance MUST BE INTEGER!
      Distance values are scaled by 100. Note that solution printer must scale down by 100.

      Basically the way the system internally accesses the distance matrix.
      """

      # Convert from routing variable Index to distance matrix NodeIndex.
      from_node = manager.IndexToNode(from_index)
      to_node = manager.IndexToNode(to_index)
      distance = vrp_instance.arcs[from_node][to_node].distance
      distance = int(round(distance * 100))  # scaling to keep float precision
      print("distance from node {0} to node {1} is {2}\n".format(from_node, to_node, distance))

      return distance

  distance_callback(1, 2)

I call distance_callback to check that it's working.
Yes, the distance given is a scale version of the value from the distance matrix.
(remember that node 0 is the first column of the distance matrix)
--------------------------------------------------------------------------

[[ 0.          5.38516481  1.          5.09901951  8.54400375  6.08276253
   3.16227766 10.        ]
 [ 5.38516481  0.          5.09901951  5.          3.16227766  5.65685425
   4.12310563  5.        ]
 [ 1.          5.09901951  0.          4.12310563  8.24621125  5.09901951
   2.23606798  9.43398113]
 [ 5.09901951  5.          4.12310563  0.          7.28010989  1.
   2.          7.07106781]
 [ 8.54400375  3.16227766  8.24621125  7.28010989  0.          7.61577311
   7.          3.        ]
 [ 6.08276253  5.65685425  5.09901951  1.          7.61577311  0.
   3.          7.        ]
 [ 3.16227766  4.12310563  2.23606798  2.          7.          3.
   0.          7.61577311]
 [10.          5.          9.43398113  7.07106781  3.          7.
   7.61577311  0.        ]]
distance from node 1 to node 2 is 510
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  4 Load(4) ->  3 Load(6) ->  1 Load(7) ->  0 Load(7)
Distance of the route: 0m
Load of the route: 7

Route for vehicle 4:
 0 Load(0) ->  7 Load(8) ->  6 Load(12) ->  5 Load(14) ->  2 Load(15) ->  0 Load(15)
Distance of the route: 0m
Load of the route: 15

Total distance of all routes: 0m
Total load of all routes: 22

--------------------------------------------------------------------------


But the distances given in the solution is 0! Why?
I go back to the old distance callback:
--------------------------------------------------------------------------

Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  5 Load(2) ->  6 Load(6) ->  2 Load(7) ->  1 Load(8) ->  4 Load(12) ->  3 Load(14) ->  0 Load(14)
Distance of the route: 2464m
Load of the route: 14

Route for vehicle 4:
 0 Load(0) ->  7 Load(8) ->  0 Load(8)
Distance of the route: 388m
Load of the route: 8

Total distance of all routes: 2852m
Total load of all routes: 22
[Finished in 1.764s]

--------------------------------------------------------------------------

So the old distance callback works.
Let's try putting our VRPInstance through create_data_model():.

    def create_data_model(vrp_instance):  # We can replace this with a VRPModeling structure?, or a read-in
        """Stores the data for the problem. Creates a dictionary, to be exact. """

        data = {}
        data['distance_matrix'] = vrp_instance.get_distance_matrix()
        print(data['distance_matrix'])

We print out the distance matrix to make sure it works.
--------------------------------------------------------------------------
[[ 0.          5.38516481  1.          5.09901951  8.54400375  6.08276253  3.16227766 10.        ]
 [ 5.38516481  0.          5.09901951  5.          3.16227766  5.65685425  4.12310563  5.        ]
 [ 1.          5.09901951  0.          4.12310563  8.24621125  5.09901951  2.23606798  9.43398113]
 [ 5.09901951  5.          4.12310563  0.          7.28010989  1.          2.          7.07106781]
 [ 8.54400375  3.16227766  8.24621125  7.28010989  0.          7.61577311  7.          3.        ]
 [ 6.08276253  5.65685425  5.09901951  1.          7.61577311  0.          3.          7.        ]
 [ 3.16227766  4.12310563  2.23606798  2.          7.          3.          0.          7.61577311]
 [10.          5.          9.43398113  7.07106781  3.          7.          7.61577311  0.        ]]
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  7 Load(13) ->  0 Load(13)
Distance of the route: 21m
Load of the route: 13

Route for vehicle 4:
 0 Load(0) ->  2 Load(1) ->  6 Load(5) ->  3 Load(7) ->  5 Load(9) ->  0 Load(9)
Distance of the route: 12m
Load of the route: 9

Total distance of all routes: 33m
Total load of all routes: 22
[Finished in 0.398s]
--------------------------------------------------------------------------

Hm. The distance still shows.
More interestingly the solution is different from when the distance callback used arcs.
Is it because distance matrix values are floats?
or-tools supposedly needs integer values, but it seems to produce a solution anyway?
Let's try scaling and rounding to an integer:

data['distance_matrix'] = np.rint(vrp_instance.get_distance_matrix() * 100)

The solution might change due to precision:
--------------------------------------------------------------------------

[[   0.  539.  100.  510.  854.  608.  316. 1000.]
 [ 539.    0.  510.  500.  316.  566.  412.  500.]
 [ 100.  510.    0.  412.  825.  510.  224.  943.]
 [ 510.  500.  412.    0.  728.  100.  200.  707.]
 [ 854.  316.  825.  728.    0.  762.  700.  300.]
 [ 608.  566.  510.  100.  762.    0.  300.  700.]
 [ 316.  412.  224.  200.  700.  300.    0.  762.]
 [1000.  500.  943.  707.  300.  700.  762.    0.]]
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  7 Load(13) ->  0 Load(13)
Distance of the route: 2155m
Load of the route: 13

Route for vehicle 4:
 0 Load(0) ->  6 Load(4) ->  3 Load(6) ->  5 Load(8) ->  2 Load(9) ->  0 Load(9)
Distance of the route: 1226m
Load of the route: 9

Total distance of all routes: 3381m
Total load of all routes: 22
[Finished in 0.469s]

--------------------------------------------------------------------------


Okay, weird. The solution did change slightly.
But it's really similar to the previous solution, with the same nodes in each route.
Just the order in the second route is swapped around.
It's still not similar to the arcs distance callback though.

I want to directly pull the distances from arcs instead of having to got through the get_distance_matrix() function.
A thought: VRPInstance.arcs doesn't actually store arcs going from a node to itself.
Distance matrices on the other hand store zeros on the diagonal. Does that matter?

    def distance_callback(from_index, to_index):

        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        if from_node == to_node:
            distance = 0
        else:
            distance = (vrp_instance.arcs[from_node][to_node]).distance
            distance = round(distance * 100)
        return distance

Now:
--------------------------------------------------------------------------

Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  1 Load(1) ->  4 Load(5) ->  7 Load(13) ->  0 Load(13)
Distance of the route: 2155m
Load of the route: 13

Route for vehicle 4:
 0 Load(0) ->  6 Load(4) ->  3 Load(6) ->  5 Load(8) ->  2 Load(9) ->  0 Load(9)
Distance of the route: 1226m
Load of the route: 9

Total distance of all routes: 3381m
Total load of all routes: 22
[Finished in 0.433s]

--------------------------------------------------------------------------


Yes! It was the zeroes!
The solution is the same as the old distance callback on the VRPInstance.
But showing the distance this time.
The bug is fixed!

I want to get rid of create_data_model() completely and transfer everything to create_random_vrp_instance().
The next task is to extract demands directly from vrp_instance.nodes[index].demand

    # Add Capacity constraint
    def demand_callback(from_index):
        "Returns the demand of the node"
        # Convert from routing variable Index to demands NodeIndex
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]
        return demand

Changed to:

        def demand_callback(from_index):
            from_node = manager.IndexToNode(from_index)
            demand = vrp_instance.nodes[from_node].demand
            print(demand)
            return demand

And the one reference in the solution printer is adjusted:

    route_load += vrp_instance.nodes[node_index].demand

I print the demand so we can see if it extract it properly:
--------------------------------------------------------------------------
id    location    demand
0     [0, 0]      0
1     [5, 2]      35
2     [0, 1]      45
3     [1, 5]      5
4     [8, 3]      5
5     [1, 6]      35
6     [1, 3]      10
7     [8, 6]      5
0
35
45
5
5
35
10
5
45
....
0
45
0
35
[Finished in 0.569s]
--------------------------------------------------------------------------


It extracts properly, but doesn't print out the solution?
Ah! What if there is no possible solution because the vehicle capacities are too small:

  data['vehicle_capacities'] = [15, 15, 15, 15, 15]

Let's reduce the demand range to 15 when we generate the demand in create_random_vrp_instance():

    demand = random.randrange(1, 15, 1)

Aaaaand:
--------------------------------------------------------------------------
id    location    demand
0     [0, 0]      0
1     [5, 2]      7
2     [0, 1]      14
3     [8, 1]      6
4     [9, 0]      9
5     [3, 0]      2
6     [6, 6]      2
7     [3, 1]      9
[0, 7, 14, 6, 9, 2, 2, 9]
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  3 Load(6) ->  4 Load(15) ->  0 Load(15)
Distance of the route: 1847m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  6 Load(2) ->  1 Load(9) ->  5 Load(11) ->  0 Load(11)
Distance of the route: 1844m
Load of the route: 11

Route for vehicle 3:
 0 Load(0) ->  7 Load(9) ->  0 Load(9)
Distance of the route: 632m
Load of the route: 9

Route for vehicle 4:
 0 Load(0) ->  2 Load(14) ->  0 Load(14)
Distance of the route: 200m
Load of the route: 14

Total distance of all routes: 4523m
Total load of all routes: 49
[Finished in 0.424s]

--------------------------------------------------------------------------


Next I want to get rid of data['vehicle_capacities'] and extract that number straight from create_random_vrp_instance():

  from VRPModeling.Vehicle import Vehicle
    vehicle1 = Vehicle(15)

Since my problem only has 1 vehicle with one capacity, we don't need the vector of vehicle capacities as found in the original:

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
      routing.AddDimensionWithVehicleCapacity(
          demand_callback_index,
          0,  # null capacity slack
          data['vehicle_capacities'],
          True,  # start culum to zero
          'Capacity')

Instead of AddDimensionWithVehicleCapacity(), we can just use AddDimension() with a single upper bound capacity:

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimension(
        demand_callback_index,
        0,  # null capacity slack https://developers.google.com/optimization/routing/dimensions#slack_variables
        vrp_instance.vehicle.capacity,
        True,  # start culum to zero
        'Capacity')

This should give us the same solution.
--------------------------------------------------------------------------

Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  3 Load(6) ->  4 Load(15) ->  0 Load(15)
Distance of the route: 1847m
Load of the route: 15

Route for vehicle 2:
 0 Load(0) ->  6 Load(2) ->  1 Load(9) ->  5 Load(11) ->  0 Load(11)
Distance of the route: 1844m
Load of the route: 11

Route for vehicle 3:
 0 Load(0) ->  7 Load(9) ->  0 Load(9)
Distance of the route: 632m
Load of the route: 9

Route for vehicle 4:
 0 Load(0) ->  2 Load(14) ->  0 Load(14)
Distance of the route: 200m
Load of the route: 14
Total distance of all routes: 4523m
Total load of all routes: 49
[Finished in 0.4s]

--------------------------------------------------------------------------


Yep!
Okay, now I want to load a toy VRP instance file using import_from_vrp_file() from FileProcessor in external_data_routing.py :

    def import_vrp_instance_from_file(absolute_path):
        from VRPModeling.FileProcessor import FileProcessor
        proc = FileProcessor()
        vrp_instance = proc.import_from_vrp_file(absolute_path)

        return vrp_instance

I choose to load up Andersen_n8. I changed the vehicle capacity of Andersen_n8 from 11 to 50, since the highest node demand is 45.
--------------------------------------------------------------------------

NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 50

id    location    demand
0     [0, 0]      0
1     [5, 13]      5
2     [9, 4]      15
3     [1, 0]      15
4     [8, 3]      20
5     [4, 10]      25
6     [10, 4]      45
7     [1, 1]      35
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  1 Load(5) ->  5 Load(30) ->  0 Load(30)
Distance of the route: 2786m
Load of the route: 30

Route for vehicle 2:
 0 Load(0) ->  6 Load(45) ->  0 Load(45)
Distance of the route: 2154m
Load of the route: 45

Route for vehicle 3:
 0 Load(0) ->  3 Load(15) ->  4 Load(35) ->  2 Load(50) ->  0 Load(50)
Distance of the route: 1988m
Load of the route: 50

Route for vehicle 4:
 0 Load(0) ->  7 Load(35) ->  0 Load(35)
Distance of the route: 282m
Load of the route: 35

Total distance of all routes: 7210m
Total load of all routes: 160
[Finished in 0.431s]

--------------------------------------------------------------------------


Hm. So I now have 2 issues:
1. The vehicle capacity needs to always be greater than the largest node demand.
Otherwise, or-tools will refuse to solve.
2. The number of vehicles need to be greater than the number of routes required.
Otherwise, again, or-tools won't produce a solution.
(Note that there is only one vehicle, and having several 'dummy vehicles' simply represents multiple trips at this point)

I think I will solve issue 1. by not allowing VRPInstance to add_node(demand) if the demand > vehicle capacity.
I changed the vehicle capacity of Andersen_n8 to 30:
--------------------------------------------------------------------------
NAME : Andersen_n8

TYPE : CVRP

DIMENSION : 8

EDGE_WEIGHT_TYPE : EUC_2D

CAPACITY : 30

Node at location [10, 4] could not be added because demand 45 is greater than vehicle capacity 30
Node at location [1, 1] could not be added because demand 35 is greater than vehicle capacity 30
id    location    demand
0     [0, 0]      0
1     [5, 13]      5
2     [9, 4]      15
3     [1, 0]      15
4     [8, 3]      20
5     [4, 10]      25
Route for vehicle 0:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  1 Load(5) ->  5 Load(30) ->  0 Load(30)
Distance of the route: 2786m
Load of the route: 30

Route for vehicle 3:
 0 Load(0) ->  4 Load(20) ->  0 Load(20)
Distance of the route: 1708m
Load of the route: 20

Route for vehicle 4:
 0 Load(0) ->  3 Load(15) ->  2 Load(30) ->  0 Load(30)
Distance of the route: 1979m
Load of the route: 30

Total distance of all routes: 6473m
Total load of all routes: 80
[Finished in 0.401s]

--------------------------------------------------------------------------


Hm. It may be a pain to print out "Node at location [bla, bla] could not be added...."
every single time, especially if a large number of nodes can't be added.
We don't want to flood the output.
Consider a debug mode?

Okay, now I want to solve a benchmark problem:
"C:/Users/jc321076/Documents/PhD/github/Autonomous_DSVRP/Instances/Vrp-Set-X/Vrp-Set-X/Vrp-Set-X/X/X-n101-k25.vrp"

I don't know how many routes we'll need, but the number of vehicles is 25, so I'll set num_vehicles to 30.
--------------------------------------------------------------------------
NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 211524m
Load of the route: 205

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 4:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 101298m
Load of the route: 178

Route for vehicle 5:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 222501m
Load of the route: 202

Route for vehicle 6:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 153432m
Load of the route: 204

Route for vehicle 7:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 134427m
Load of the route: 203

Route for vehicle 8:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 131452m
Load of the route: 196

Route for vehicle 9:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 145608m
Load of the route: 201

Route for vehicle 10:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 120459m
Load of the route: 196

Route for vehicle 11:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 122076m
Load of the route: 201

Route for vehicle 12:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 123972m
Load of the route: 206

Route for vehicle 13:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 100658m
Load of the route: 183

Route for vehicle 14:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 113861m
Load of the route: 185

Route for vehicle 15:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 108385m
Load of the route: 199

Route for vehicle 16:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 98853m
Load of the route: 202

Route for vehicle 17:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 89996m
Load of the route: 188

Route for vehicle 18:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 136370m
Load of the route: 203

Route for vehicle 19:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 83842m
Load of the route: 205

Route for vehicle 20:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 84465m
Load of the route: 200

Route for vehicle 21:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 80718m
Load of the route: 191

Route for vehicle 22:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 84120m
Load of the route: 199

Route for vehicle 23:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 103443m
Load of the route: 206

Route for vehicle 24:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 47443m
Load of the route: 144

Route for vehicle 25:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 57573m
Load of the route: 172

Route for vehicle 26:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 74781m
Load of the route: 172

Route for vehicle 27:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 53412m
Load of the route: 144

Route for vehicle 28:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 66675m
Load of the route: 184

Route for vehicle 29:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 89156m
Load of the route: 178

Total distance of all routes: 2940500m
Total load of all routes: 5147
[Finished in 1.031s]
--------------------------------------------------------------------------


The or-tools solution has 27 routes and a total distance of 27591m.
The optimal solution of this benchmark can be seen here:
http://vrp.galgos.inf.puc-rio.br/index.php/en/plotted-instances?data=X-n101-k25
It seems that the optimal solution uses 26 routes and has a proven optimality value of 27591m total distance.

Oops! I forgot that I was scale the coordinates up in distance callback in case they weren't integer:
    distance = round(distance * 100)
I've scaled them back down in print_solution():

    scaled_route_distance = routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
    route_distance += round(scaled_route_distance/100)

Which should give the same solution:
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 2116m
Load of the route: 205

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 4:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 1014m
Load of the route: 178

Route for vehicle 5:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 2225m
Load of the route: 202

Route for vehicle 6:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 1534m
Load of the route: 204

Route for vehicle 7:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1344m
Load of the route: 203

Route for vehicle 8:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 1314m
Load of the route: 196

Route for vehicle 9:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1455m
Load of the route: 201

Route for vehicle 10:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1205m
Load of the route: 196

Route for vehicle 11:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 1220m
Load of the route: 201

Route for vehicle 12:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 1238m
Load of the route: 206

Route for vehicle 13:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 1005m
Load of the route: 183

Route for vehicle 14:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 1139m
Load of the route: 185

Route for vehicle 15:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 1085m
Load of the route: 199

Route for vehicle 16:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 989m
Load of the route: 202

Route for vehicle 17:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 900m
Load of the route: 188

Route for vehicle 18:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 1364m
Load of the route: 203

Route for vehicle 19:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 838m
Load of the route: 205

Route for vehicle 20:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 844m
Load of the route: 200

Route for vehicle 21:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 808m
Load of the route: 191

Route for vehicle 22:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 841m
Load of the route: 199

Route for vehicle 23:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 1034m
Load of the route: 206

Route for vehicle 24:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 474m
Load of the route: 144

Route for vehicle 25:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 576m
Load of the route: 172

Route for vehicle 26:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 747m
Load of the route: 172

Route for vehicle 27:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 534m
Load of the route: 144

Route for vehicle 28:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 666m
Load of the route: 184

Route for vehicle 29:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 891m
Load of the route: 178

Total distance of all routes: 29400m
Total load of all routes: 5147
[Finished in 1.084s]

--------------------------------------------------------------------------


Looks like it has some effect on the accuracy...probably from the rounding.
I can amend this a little by:
1. scale by a higher magnitude to increase precision
2. descale AFTER the distances are added up.

        route_distance += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
    total_distance += route_distance
    total_load += route_load
    route_distance = round(route_distance/1000)
    plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index), route_load)
    plan_output += 'Distance of the route: {}m\n'.format(route_distance)
    plan_output += 'Load of the route: {}\n'.format(route_load)
    print(plan_output)
total_distance = round(total_distance/1000)
print('Total distance of all routes: {}m'.format(total_distance))

The individual route distances will still be imprecise, but the final distance will be more accurate:
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 2115m
Load of the route: 205

Route for vehicle 1:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 2:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 3:
 0 Load(0) ->  0 Load(0)
Distance of the route: 0m
Load of the route: 0

Route for vehicle 4:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 1013m
Load of the route: 178

Route for vehicle 5:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 2225m
Load of the route: 202

Route for vehicle 6:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 1534m
Load of the route: 204

Route for vehicle 7:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1344m
Load of the route: 203

Route for vehicle 8:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 1315m
Load of the route: 196

Route for vehicle 9:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1456m
Load of the route: 201

Route for vehicle 10:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1205m
Load of the route: 196

Route for vehicle 11:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 1221m
Load of the route: 201

Route for vehicle 12:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 1240m
Load of the route: 206

Route for vehicle 13:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 1007m
Load of the route: 183

Route for vehicle 14:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 1139m
Load of the route: 185

Route for vehicle 15:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 1084m
Load of the route: 199

Route for vehicle 16:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 989m
Load of the route: 202

Route for vehicle 17:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 900m
Load of the route: 188

Route for vehicle 18:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 1364m
Load of the route: 203

Route for vehicle 19:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 838m
Load of the route: 205

Route for vehicle 20:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 845m
Load of the route: 200

Route for vehicle 21:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 807m
Load of the route: 191

Route for vehicle 22:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 841m
Load of the route: 199

Route for vehicle 23:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 1034m
Load of the route: 206

Route for vehicle 24:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 474m
Load of the route: 144

Route for vehicle 25:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 576m
Load of the route: 172

Route for vehicle 26:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 748m
Load of the route: 172

Route for vehicle 27:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 534m
Load of the route: 144

Route for vehicle 28:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 667m
Load of the route: 184

Route for vehicle 29:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 892m
Load of the route: 178

Total distance of all routes: 29405m
Total load of all routes: 5147
[Finished in 1.047s]

--------------------------------------------------------------------------


Currently, the number of vehicles is just manually set to higher than the number of routes.
But since I won't know how many routes other VRPInstance solutions need, I'd like a way to keep the number of vehicles automatically higher.
For now, I can guarantee the number of vehicles being more than the number of routes by having at least one vehicle per node:

    num_vehicles = dim

And not printing the empty vehicle routes:

    if route_distance != 0:
        num_routes += 1
        plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index), route_load)
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        plan_output += 'Load of the route: {}\n'.format(route_load)
        print(plan_output)

Which prints the solution:
--------------------------------------------------------------------------

NAME : 	X-n101-k25

COMMENT : 	"Generated by Uchoa, Pecin, Pessoa, Poggi, Subramanian, and Vidal (2013)"

TYPE : 	CVRP

DIMENSION : 	101

EDGE_WEIGHT_TYPE : 	EUC_2D

CAPACITY : 	206

Route for vehicle 0:
 0 Load(0) ->  98 Load(51) ->  89 Load(69) ->  47 Load(80) ->  29 Load(84) ->  36 Load(181) ->  72 Load(197) ->  57 Load(205) ->  0 Load(205)
Distance of the route: 2115m
Load of the route: 205

Route for vehicle 75:
 0 Load(0) ->  18 Load(81) ->  4 Load(151) ->  39 Load(178) ->  0 Load(178)
Distance of the route: 1013m
Load of the route: 178

Route for vehicle 76:
 0 Load(0) ->  87 Load(2) ->  43 Load(17) ->  45 Load(31) ->  2 Load(82) ->  7 Load(83) ->  13 Load(129) ->  74 Load(202) ->  0 Load(202)
Distance of the route: 2225m
Load of the route: 202

Route for vehicle 77:
 0 Load(0) ->  14 Load(27) ->  6 Load(81) ->  37 Load(151) ->  49 Load(204) ->  0 Load(204)
Distance of the route: 1534m
Load of the route: 204

Route for vehicle 78:
 0 Load(0) ->  92 Load(68) ->  9 Load(130) ->  86 Load(203) ->  0 Load(203)
Distance of the route: 1344m
Load of the route: 203

Route for vehicle 79:
 0 Load(0) ->  51 Load(80) ->  62 Load(118) ->  99 Load(196) ->  0 Load(196)
Distance of the route: 1315m
Load of the route: 196

Route for vehicle 80:
 0 Load(0) ->  1 Load(38) ->  70 Load(134) ->  54 Load(201) ->  0 Load(201)
Distance of the route: 1456m
Load of the route: 201

Route for vehicle 81:
 0 Load(0) ->  66 Load(46) ->  84 Load(89) ->  90 Load(144) ->  68 Load(196) ->  0 Load(196)
Distance of the route: 1205m
Load of the route: 196

Route for vehicle 82:
 0 Load(0) ->  71 Load(18) ->  83 Load(114) ->  52 Load(201) ->  0 Load(201)
Distance of the route: 1221m
Load of the route: 201

Route for vehicle 83:
 0 Load(0) ->  38 Load(32) ->  48 Load(125) ->  3 Load(198) ->  64 Load(201) ->  34 Load(206) ->  0 Load(206)
Distance of the route: 1240m
Load of the route: 206

Route for vehicle 84:
 0 Load(0) ->  25 Load(53) ->  10 Load(151) ->  28 Load(183) ->  0 Load(183)
Distance of the route: 1007m
Load of the route: 183

Route for vehicle 85:
 0 Load(0) ->  65 Load(5) ->  78 Load(44) ->  42 Load(120) ->  63 Load(185) ->  0 Load(185)
Distance of the route: 1139m
Load of the route: 185

Route for vehicle 86:
 0 Load(0) ->  81 Load(14) ->  91 Load(89) ->  27 Load(176) ->  21 Load(199) ->  0 Load(199)
Distance of the route: 1084m
Load of the route: 199

Route for vehicle 87:
 0 Load(0) ->  59 Load(55) ->  82 Load(138) ->  77 Load(202) ->  0 Load(202)
Distance of the route: 989m
Load of the route: 202

Route for vehicle 88:
 0 Load(0) ->  88 Load(21) ->  67 Load(121) ->  60 Load(188) ->  0 Load(188)
Distance of the route: 900m
Load of the route: 188

Route for vehicle 89:
 0 Load(0) ->  69 Load(28) ->  16 Load(125) ->  55 Load(197) ->  76 Load(203) ->  0 Load(203)
Distance of the route: 1364m
Load of the route: 203

Route for vehicle 90:
 0 Load(0) ->  15 Load(17) ->  22 Load(79) ->  41 Load(146) ->  20 Load(205) ->  0 Load(205)
Distance of the route: 838m
Load of the route: 205

Route for vehicle 91:
 0 Load(0) ->  94 Load(61) ->  40 Load(103) ->  44 Load(142) ->  58 Load(200) ->  0 Load(200)
Distance of the route: 845m
Load of the route: 200

Route for vehicle 92:
 0 Load(0) ->  75 Load(76) ->  93 Load(176) ->  33 Load(191) ->  0 Load(191)
Distance of the route: 807m
Load of the route: 191

Route for vehicle 93:
 0 Load(0) ->  31 Load(95) ->  73 Load(102) ->  53 Load(199) ->  0 Load(199)
Distance of the route: 841m
Load of the route: 199

Route for vehicle 94:
 0 Load(0) ->  96 Load(40) ->  26 Load(58) ->  56 Load(108) ->  8 Load(206) ->  0 Load(206)
Distance of the route: 1034m
Load of the route: 206

Route for vehicle 95:
 0 Load(0) ->  80 Load(70) ->  17 Load(144) ->  0 Load(144)
Distance of the route: 474m
Load of the route: 144

Route for vehicle 96:
 0 Load(0) ->  23 Load(66) ->  19 Load(128) ->  50 Load(172) ->  0 Load(172)
Distance of the route: 576m
Load of the route: 172

Route for vehicle 97:
 0 Load(0) ->  100 Load(35) ->  61 Load(124) ->  97 Load(172) ->  0 Load(172)
Distance of the route: 748m
Load of the route: 172

Route for vehicle 98:
 0 Load(0) ->  5 Load(58) ->  12 Load(144) ->  0 Load(144)
Distance of the route: 534m
Load of the route: 144

Route for vehicle 99:
 0 Load(0) ->  30 Load(61) ->  85 Load(73) ->  11 Load(98) ->  79 Load(184) ->  0 Load(184)
Distance of the route: 667m
Load of the route: 184

Route for vehicle 100:
 0 Load(0) ->  35 Load(53) ->  46 Load(96) ->  24 Load(131) ->  95 Load(155) ->  32 Load(178) ->  0 Load(178)
Distance of the route: 892m
Load of the route: 178

Total distance of all routes: 29405m
Total load of all routes: 5147
Total number of routes: 27
[Finished in 1.234s]

--------------------------------------------------------------------------


Now I want to solve a real-life weed problem.
I use BOPMid_full_matrix.txt, which in fact is a .vrp file.
I should change that.




--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
