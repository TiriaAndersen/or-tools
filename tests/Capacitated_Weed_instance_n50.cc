#include <vector>

#include "ortools/constraint_solver/routing.h"
#include "ortools/constraint_solver/routing_enums.pb.h"
#include "ortools/constraint_solver/routing_index_manager.h"
#include "ortools/constraint_solver/routing_parameters.h"

namespace operations_research {
struct DataModel {
  const std::vector<std::vector<int64>> distance_matrix{
      {0, 136213, 125710, 55354, 374056, 345416, 354203, 375772, 410710, 502547, 483406, 617548, 655624, 617132, 611777, 602279, 570711, 581569, 600711, 591924, 598137, 722340, 697843, 701630, 731630, 758198, 647279, 664706, 655208, 626924, 685563, 675208, 704706, 712635, 632782, 614497, 600355, 584142, 598284, 609142, 625355, 639497, 618284, 631213, 592071, 585000, 592071, 606213, 599142, 621421},
      {136213, 0, 59141, 201066, 534411, 505772, 514558, 536127, 571066, 662904, 614472, 696751, 734828, 696335, 690980, 681482, 649914, 660772, 679914, 671127, 677340, 801543, 777046, 780833, 810833, 837401, 726482, 743909, 734411, 706127, 764767, 754411, 783909, 791838, 711985, 693701, 679558, 663345, 654706, 688345, 704558, 718701, 681777, 695919, 662990, 662132, 671274, 685416, 678345, 611569},
      {125710, 59141, 0, 145000, 472132, 443492, 452279, 473847, 515000, 600624, 552193, 618970, 641543, 603051, 597696, 588198, 556630, 567487, 586630, 577843, 584056, 708259, 683762, 687548, 717548, 744117, 633198, 650624, 641127, 612843, 671482, 661127, 690624, 698553, 618701, 600416, 586274, 570061, 561421, 595061, 611274, 625416, 588492, 602635, 569706, 568848, 577990, 592132, 585061, 518284},
      {55354, 201066, 145000, 0, 321274, 292635, 301421, 322990, 360000, 449767, 415980, 550122, 588198, 549706, 544350, 534853, 503284, 514142, 533284, 524497, 530711, 654914, 630416, 634203, 664203, 690772, 579853, 597279, 587782, 559497, 618137, 607782, 637279, 645208, 565355, 547071, 535000, 529142, 555711, 556213, 564142, 576213, 575711, 588640, 549497, 540355, 543284, 556213, 550355, 582990},
      {374056, 534411, 472132, 321274, 0, 30000, 75355, 22071, 189350, 111066, 124142, 258284, 321213, 371777, 389203, 406630, 410268, 429410, 440268, 416985, 412843, 404497, 406066, 427279, 446066, 454853, 439558, 444203, 467843, 460268, 475416, 485772, 484203, 500416, 474410, 468553, 462696, 456838, 483406, 483909, 485624, 497696, 503406, 516335, 477193, 468051, 470980, 483909, 478051, 537046},
      {345416, 505772, 443492, 292635, 30000, 0, 5000, 5000, 149350, 165208, 178284, 320711, 369142, 419706, 437132, 454558, 458197, 477339, 488197, 464914, 460772, 454497, 453995, 475208, 493995, 502782, 487487, 492132, 515772, 508197, 523345, 533701, 532132, 548345, 522339, 516482, 510624, 504767, 531335, 531838, 533553, 545624, 551335, 564264, 525122, 515980, 518909, 531838, 525980, 567401},
      {354203, 514558, 452279, 301421, 75355, 5000, 0, 7070, 125208, 186924, 206213, 342426, 404142, 454706, 472132, 489558, 493197, 512339, 523197, 499914, 495772, 489497, 488995, 510208, 528995, 537782, 522487, 527132, 550772, 543198, 558345, 568701, 567132, 583345, 557340, 551482, 545624, 539767, 566335, 566838, 568553, 580624, 586335, 599264, 560122, 550980, 553909, 566838, 560980, 602401},
      {375772, 536127, 473847, 322990, 22071, 5000, 7070, 0, 138137, 146924, 160000, 302426, 371569, 422132, 439558, 456985, 460624, 479767, 490624, 467339, 463197, 454853, 456421, 477635, 496421, 505208, 489914, 494558, 518197, 510624, 525772, 536127, 534558, 550772, 524767, 518909, 513051, 507193, 533762, 534264, 535980, 548051, 553762, 566690, 527548, 518406, 521335, 534264, 528406, 573614},
      {410710, 571066, 515000, 360000, 189350, 149350, 125208, 138137, 0, 254142, 318995, 446924, 536777, 587340, 604767, 622193, 625833, 644975, 655833, 632548, 628406, 620061, 621630, 642843, 661630, 670416, 655122, 659767, 683406, 675833, 690980, 701335, 699767, 715980, 689975, 684117, 678259, 672401, 698970, 699472, 701188, 713259, 718970, 731899, 692756, 683614, 686543, 699472, 693614, 743823},
      {502547, 662904, 600624, 449767, 111066, 165208, 186924, 146924, 254142, 0, 52426, 170711, 260563, 311127, 338198, 370269, 406127, 422339, 424410, 392340, 382340, 343848, 345416, 366630, 385416, 394203, 390624, 383553, 418909, 423553, 414767, 425122, 423553, 439767, 447696, 451482, 464410, 458553, 502696, 485624, 472696, 471838, 519767, 520980, 485624, 475624, 478553, 485624, 485624, 585624},
      {483406, 614472, 552193, 415980, 124142, 178284, 206213, 160000, 318995, 52426, 0, 105000, 186569, 237132, 254558, 280772, 322487, 338701, 340772, 308701, 298701, 269853, 271421, 292635, 311421, 320208, 310772, 309558, 339056, 334056, 340772, 351127, 349558, 365772, 358198, 361985, 374914, 374914, 419056, 396127, 383198, 382340, 436127, 437339, 401985, 391985, 394914, 401985, 401985, 501985},
      {617548, 696751, 618970, 550122, 258284, 320711, 342426, 302426, 446924, 170711, 105000, 0, 75711, 184853, 213994, 246066, 287782, 303995, 299350, 273995, 263995, 158995, 169350, 190563, 200563, 209350, 255563, 239706, 283848, 290563, 265061, 290061, 253344, 277487, 314706, 318492, 331421, 340208, 384350, 352635, 339706, 338848, 392635, 393848, 367279, 357279, 360208, 358492, 367279, 467279},
      {655624, 734828, 641543, 588198, 321213, 369142, 404142, 371569, 536777, 260563, 186569, 75711, 0, 90000, 119142, 157426, 199142, 215355, 200355, 185355, 175355, 57071, 61569, 85711, 98640, 107426, 156569, 140711, 184853, 191569, 166066, 191066, 154350, 175563, 215711, 219496, 232426, 246569, 293640, 253640, 240711, 239853, 293640, 294853, 277782, 270711, 261569, 259496, 277782, 382782},
      {617132, 696335, 603051, 549706, 371777, 419706, 454706, 422132, 587340, 311127, 237132, 184853, 90000, 0, 15000, 51213, 95000, 109142, 103283, 79142, 69142, 99853, 63640, 67426, 97426, 132782, 59497, 55354, 87782, 94497, 86569, 96924, 95355, 111569, 118640, 122426, 135355, 149497, 193640, 156569, 143640, 142782, 196569, 197782, 176569, 166569, 164497, 162426, 176569, 276569},
      {611777, 690980, 597696, 544350, 389203, 437132, 472132, 439558, 604767, 338198, 254558, 213994, 119142, 15000, 0, 10000, 62071, 74142, 61213, 44142, 34142, 118640, 79497, 68640, 92782, 128995, 26213, 30000, 57426, 52426, 59141, 69497, 74142, 88284, 76569, 80355, 93284, 107426, 154497, 114497, 101569, 100711, 154497, 155711, 138640, 131569, 122426, 120355, 138640, 241569},
      {602279, 681482, 588198, 534853, 406630, 454558, 489558, 456985, 622193, 370269, 280772, 246066, 157426, 51213, 10000, 0, 37071, 44142, 29142, 12071, 5000, 148640, 109497, 95711, 113995, 147279, 15000, 38284, 37071, 26213, 61213, 59141, 78284, 90355, 47426, 50355, 63284, 77426, 124497, 84497, 71569, 70711, 124497, 125710, 108640, 101569, 92426, 90355, 108640, 215711},
      {570711, 649914, 556630, 503284, 410268, 458197, 493197, 460624, 625833, 406127, 322487, 287782, 199142, 95000, 62071, 37071, 0, 7070, 20000, 12071, 27070, 208994, 169853, 156924, 175208, 211421, 64497, 93640, 72426, 44142, 102782, 96569, 121924, 129853, 58284, 52071, 46213, 43284, 87426, 67426, 69142, 81213, 101569, 102782, 70355, 60354, 63284, 67426, 70355, 170355},
      {581569, 660772, 567487, 514142, 429410, 477339, 512339, 479767, 644975, 422339, 338701, 303995, 215355, 109142, 74142, 44142, 7070, 0, 5000, 20000, 39142, 210711, 171569, 157782, 176066, 209350, 62426, 91569, 67426, 39142, 97782, 83640, 116924, 124853, 41213, 25000, 21213, 24142, 71213, 45355, 44142, 56213, 79497, 80711, 54141, 44142, 43284, 45355, 54141, 154142},
      {600711, 679914, 586630, 533284, 440268, 488197, 523197, 490624, 655833, 424410, 340772, 299350, 200355, 103283, 61213, 29142, 20000, 5000, 0, 12071, 26213, 189497, 150355, 136569, 154853, 188137, 41213, 70355, 43284, 12071, 73640, 60354, 95711, 100711, 20000, 10000, 17071, 25000, 78284, 38284, 34142, 41213, 78284, 79497, 60354, 51213, 44142, 44142, 60354, 161213},
      {591924, 671127, 577843, 524497, 416985, 464914, 499914, 467339, 632548, 392340, 308701, 273995, 185355, 79142, 44142, 12071, 12071, 20000, 12071, 0, 5000, 185711, 146569, 132782, 151066, 184350, 40355, 69497, 51213, 25000, 81569, 75355, 100711, 108640, 39142, 39142, 52071, 60354, 104497, 73284, 63284, 62426, 113283, 114497, 87426, 77426, 80355, 79142, 87426, 187426},
      {598137, 677340, 584056, 530711, 412843, 460772, 495772, 463197, 628406, 382340, 298701, 263995, 175355, 69142, 34142, 5000, 27070, 39142, 26213, 5000, 0, 181924, 142782, 128995, 147279, 182279, 38284, 67426, 52071, 34142, 82426, 76213, 101569, 109497, 50355, 50355, 63284, 77426, 123640, 84497, 74497, 73640, 124497, 125710, 106569, 96569, 92426, 90355, 106569, 206569},
      {722340, 801543, 708259, 654914, 404497, 454497, 489497, 454853, 620061, 343848, 269853, 158995, 57071, 99853, 118640, 148640, 208994, 210711, 189497, 185711, 181924, 0, 15000, 37071, 34142, 31213, 133284, 117426, 161569, 176569, 140711, 165711, 112426, 131569, 192426, 204497, 217426, 231569, 278640, 238640, 219496, 216569, 278640, 279853, 262782, 255711, 246569, 244496, 262782, 369853},
      {697843, 777046, 683762, 630416, 406066, 453995, 488995, 456421, 621630, 345416, 271421, 169350, 61569, 63640, 79497, 109497, 169853, 171569, 150355, 146569, 142782, 15000, 0, 5000, 12071, 34142, 94142, 70000, 114142, 133284, 93284, 118283, 81569, 102782, 149142, 163284, 178284, 192426, 239496, 195355, 176213, 173284, 239496, 236569, 223640, 216569, 207426, 205355, 223640, 330711},
      {701630, 780833, 687548, 634203, 427279, 475208, 510208, 477635, 642843, 366630, 292635, 190563, 85711, 67426, 68640, 95711, 156924, 157782, 136569, 132782, 128995, 37071, 5000, 0, 5000, 36213, 80355, 52071, 90000, 115355, 65000, 92071, 53284, 74497, 131213, 145355, 164497, 178640, 223640, 175355, 156213, 147071, 221569, 215355, 207782, 200711, 191569, 189497, 207782, 316924},
      {731630, 810833, 717548, 664203, 446066, 493995, 528995, 496421, 661630, 385416, 311421, 200563, 98640, 97426, 92782, 113995, 175208, 176066, 154853, 151066, 147279, 34142, 12071, 5000, 0, 14141, 98640, 70355, 108283, 133640, 77071, 102071, 57071, 78284, 149497, 163640, 182782, 196924, 238640, 191569, 172426, 163284, 232426, 223284, 223994, 216923, 207782, 205711, 223994, 334853},
      {758198, 837401, 744117, 690772, 454853, 502782, 537782, 505208, 670416, 394203, 320208, 209350, 107426, 132782, 128995, 147279, 211421, 209350, 188137, 184350, 182279, 31213, 34142, 36213, 14141, 0, 131924, 103640, 141569, 166924, 110355, 135355, 82071, 95000, 182782, 196924, 216066, 230208, 271924, 224853, 205711, 196569, 265711, 256569, 257279, 250208, 241066, 238994, 257279, 368137},
      {647279, 726482, 633198, 579853, 439558, 487487, 522487, 489914, 655122, 390624, 310772, 255563, 156569, 59497, 26213, 15000, 64497, 62426, 41213, 40355, 38284, 133284, 94142, 80355, 98640, 131924, 0, 14141, 19142, 20000, 32070, 34142, 51213, 59141, 44142, 56213, 69142, 83284, 130355, 90355, 71213, 68284, 130355, 131569, 114497, 107426, 98284, 96213, 114497, 221569},
      {664706, 743909, 650624, 597279, 444203, 492132, 527132, 494558, 659767, 383553, 309558, 239706, 140711, 55354, 30000, 38284, 93640, 91569, 70355, 69497, 67426, 117426, 70000, 52071, 70355, 103640, 14141, 0, 30000, 49142, 17071, 36213, 30000, 42071, 65000, 79142, 98284, 112426, 159497, 111213, 92071, 89142, 157426, 152426, 143640, 136569, 127426, 125355, 143640, 250711},
      {655208, 734411, 641127, 587782, 467843, 515772, 550772, 518197, 683406, 418909, 339056, 283848, 184853, 87782, 57426, 37071, 72426, 67426, 43284, 51213, 52071, 161569, 114142, 90000, 108283, 141569, 19142, 30000, 0, 19142, 24142, 10000, 40355, 45355, 29142, 43284, 62426, 76569, 119497, 71213, 52071, 45000, 117426, 112426, 103640, 96569, 87426, 85355, 103640, 214853},
      {626924, 706127, 612843, 559497, 460268, 508197, 543198, 510624, 675833, 423553, 334056, 290563, 191569, 94497, 52426, 26213, 44142, 39142, 12071, 25000, 34142, 176569, 133284, 115355, 133640, 166924, 20000, 49142, 19142, 0, 49497, 36213, 71569, 76569, 10000, 20000, 37071, 51213, 98284, 56213, 39142, 36213, 98284, 97426, 82426, 75355, 66213, 64141, 82426, 189497},
      {685563, 764767, 671482, 618137, 475416, 523345, 558345, 525772, 690980, 414767, 340772, 265061, 166066, 86569, 59141, 61213, 102782, 97782, 73640, 81569, 82426, 140711, 93284, 65000, 77071, 110355, 32070, 17071, 24142, 49497, 0, 20000, 12071, 20000, 65354, 79497, 98640, 112782, 155711, 107426, 88284, 79142, 153640, 145355, 139853, 132782, 123640, 121569, 139853, 251066},
      {675208, 754411, 661127, 607782, 485772, 533701, 568701, 536127, 701335, 425122, 351127, 290061, 191066, 96924, 69497, 59141, 96569, 83640, 60354, 75355, 76213, 165711, 118283, 92071, 102071, 135355, 34142, 36213, 10000, 36213, 20000, 0, 34142, 33284, 40355, 55354, 76569, 90711, 130710, 82426, 63284, 54141, 125355, 116213, 114853, 107782, 98640, 96569, 114853, 226066},
      {704706, 783909, 690624, 637279, 484203, 532132, 567132, 534558, 699767, 423553, 349558, 253344, 154350, 95355, 74142, 78284, 121924, 116924, 95711, 100711, 101569, 112426, 81569, 53284, 57071, 82071, 51213, 30000, 40355, 71569, 12071, 34142, 0, 5000, 81569, 96569, 117782, 131924, 170711, 123640, 104497, 95355, 164497, 155355, 156066, 148995, 139853, 137782, 156066, 266924},
      {712635, 791838, 698553, 645208, 500416, 548345, 583345, 550772, 715980, 439767, 365772, 277487, 175563, 111569, 88284, 90355, 129853, 124853, 100711, 108640, 109497, 131569, 102782, 74497, 78284, 95000, 59141, 42071, 45355, 76569, 20000, 33284, 5000, 0, 80711, 92782, 119853, 131066, 166924, 119853, 100711, 91569, 160711, 151569, 152279, 145208, 136066, 133995, 152279, 263137},
      {632782, 711985, 618701, 565355, 474410, 522339, 557340, 524767, 689975, 447696, 358198, 314706, 215711, 118640, 76569, 47426, 58284, 41213, 20000, 39142, 50355, 192426, 149142, 131213, 149497, 182782, 44142, 65000, 29142, 10000, 65354, 40355, 81569, 80711, 0, 7070, 34142, 48284, 85355, 37071, 20000, 19142, 83284, 78284, 69497, 62426, 53284, 51213, 69497, 180711},
      {614497, 693701, 600416, 547071, 468553, 516482, 551482, 518909, 684117, 451482, 361985, 318492, 219496, 122426, 80355, 50355, 52071, 25000, 10000, 39142, 50355, 204497, 163284, 145355, 163640, 196924, 56213, 79142, 43284, 20000, 79497, 55354, 96569, 92782, 7070, 0, 7070, 24142, 64141, 20000, 7070, 15000, 64141, 61213, 48284, 41213, 32070, 30000, 48284, 159497},
      {600355, 679558, 586274, 535000, 462696, 510624, 545624, 513051, 678259, 464410, 374914, 331421, 232426, 135355, 93284, 63284, 46213, 21213, 17071, 52071, 63284, 217426, 178284, 164497, 182782, 216066, 69142, 98284, 62426, 37071, 98640, 76569, 117782, 119853, 34142, 7070, 0, 7070, 56213, 19142, 20000, 32070, 56213, 57426, 36213, 29142, 20000, 22071, 36213, 147426},
      {584142, 663345, 570061, 529142, 456838, 504767, 539767, 507193, 672401, 458553, 374914, 340208, 246569, 149497, 107426, 77426, 43284, 24142, 25000, 60354, 77426, 231569, 192426, 178640, 196924, 230208, 83284, 112426, 76569, 51213, 112782, 90711, 131924, 131066, 48284, 24142, 7070, 0, 39142, 17071, 29142, 43284, 51213, 52426, 17071, 10000, 7070, 14141, 17071, 126213},
      {598284, 654706, 561421, 555711, 483406, 531335, 566335, 533762, 698970, 502696, 419056, 384350, 293640, 193640, 154497, 124497, 87426, 71213, 78284, 104497, 123640, 278640, 239496, 223640, 238640, 271924, 130355, 159497, 119497, 98284, 155711, 130710, 170711, 166924, 85355, 64141, 56213, 39142, 0, 34142, 58284, 72426, 10000, 27070, 10000, 22071, 41213, 25000, 27070, 85355},
      {609142, 688345, 595061, 556213, 483909, 531838, 566838, 534264, 699472, 485624, 396127, 352635, 253640, 156569, 114497, 84497, 67426, 45355, 38284, 73284, 84497, 238640, 195355, 175355, 191569, 224853, 90355, 111213, 71213, 56213, 107426, 82426, 123640, 119853, 37071, 20000, 19142, 17071, 34142, 0, 10000, 26213, 30000, 31213, 19142, 27070, 12071, 7070, 21213, 133640},
      {625355, 704558, 611274, 564142, 485624, 533553, 568553, 535980, 701188, 472696, 383198, 339706, 240711, 143640, 101569, 71569, 69142, 44142, 34142, 63284, 74497, 219496, 176213, 156213, 172426, 205711, 71213, 92071, 52071, 39142, 88284, 63284, 104497, 100711, 20000, 7070, 20000, 29142, 58284, 10000, 0, 5000, 52071, 47071, 45355, 43284, 28283, 26213, 47426, 154497},
      {639497, 718701, 625416, 576213, 497696, 545624, 580624, 548051, 713259, 471838, 382340, 338848, 239853, 142782, 100711, 70711, 81213, 56213, 41213, 62426, 73640, 216569, 173284, 147071, 163284, 196569, 68284, 89142, 45000, 36213, 79142, 54141, 95355, 91569, 19142, 15000, 32070, 43284, 72426, 26213, 5000, 0, 66213, 57071, 60354, 57426, 48284, 46213, 62426, 168640},
      {618284, 681777, 588492, 575711, 503406, 551335, 586335, 553762, 718970, 519767, 436127, 392635, 293640, 196569, 154497, 124497, 101569, 79497, 78284, 113283, 124497, 278640, 239496, 221569, 232426, 265711, 130355, 157426, 117426, 98284, 153640, 125355, 164497, 160711, 83284, 64141, 56213, 51213, 10000, 30000, 52071, 66213, 0, 12071, 19142, 39142, 46213, 29142, 31213, 102426},
      {631213, 695919, 602635, 588640, 516335, 564264, 599264, 566690, 731899, 520980, 437339, 393848, 294853, 197782, 155711, 125710, 102782, 80711, 79497, 114497, 125710, 279853, 236569, 215355, 223284, 256569, 131569, 152426, 112426, 97426, 145355, 116213, 155355, 151569, 78284, 61213, 57426, 52426, 27070, 31213, 47071, 57071, 12071, 0, 32070, 52071, 47426, 33284, 38284, 111569},
      {592071, 662990, 569706, 549497, 477193, 525122, 560122, 527548, 692756, 485624, 401985, 367279, 277782, 176569, 138640, 108640, 70355, 54141, 60354, 87426, 106569, 262782, 223640, 207782, 223994, 257279, 114497, 143640, 103640, 82426, 139853, 114853, 156066, 152279, 69497, 48284, 36213, 17071, 10000, 19142, 45355, 60354, 19142, 32070, 0, 5000, 10000, 7070, 5000, 105355},
      {585000, 662132, 568848, 540355, 468051, 515980, 550980, 518406, 683614, 475624, 391985, 357279, 270711, 166569, 131569, 101569, 60354, 44142, 51213, 77426, 96569, 255711, 216569, 200711, 216923, 250208, 107426, 136569, 96569, 75355, 132782, 107782, 148995, 145208, 62426, 41213, 29142, 10000, 22071, 27070, 43284, 57426, 39142, 52071, 5000, 0, 7070, 24142, 10000, 113283},
      {592071, 671274, 577990, 543284, 470980, 518909, 553909, 521335, 686543, 478553, 394914, 360208, 261569, 164497, 122426, 92426, 63284, 43284, 44142, 80355, 92426, 246569, 207426, 191569, 207782, 241066, 98284, 127426, 87426, 66213, 123640, 98640, 139853, 136066, 53284, 32070, 20000, 7070, 41213, 12071, 28283, 48284, 46213, 47426, 10000, 7070, 0, 5000, 5000, 128283},
      {606213, 685416, 592132, 556213, 483909, 531838, 566838, 534264, 699472, 485624, 401985, 358492, 259496, 162426, 120355, 90355, 67426, 45355, 44142, 79142, 90355, 244496, 205355, 189497, 205711, 238994, 96213, 125355, 85355, 64141, 121569, 96569, 137782, 133995, 51213, 30000, 22071, 14141, 25000, 7070, 26213, 46213, 29142, 33284, 7070, 24142, 5000, 0, 5000, 127426},
      {599142, 678345, 585061, 550355, 478051, 525980, 560980, 528406, 693614, 485624, 401985, 367279, 277782, 176569, 138640, 108640, 70355, 54141, 60354, 87426, 106569, 262782, 223640, 207782, 223994, 257279, 114497, 143640, 103640, 82426, 139853, 114853, 156066, 152279, 69497, 48284, 36213, 17071, 27070, 21213, 47426, 62426, 31213, 38284, 5000, 10000, 5000, 5000, 0, 129497},
      {621421, 611569, 518284, 582990, 537046, 567401, 602401, 573614, 743823, 585624, 501985, 467279, 382782, 276569, 241569, 215711, 170355, 154142, 161213, 187426, 206569, 369853, 330711, 316924, 334853, 368137, 221569, 250711, 214853, 189497, 251066, 226066, 266924, 263137, 180711, 159497, 147426, 126213, 85355, 133640, 154497, 168640, 102426, 111569, 105355, 113283, 128283, 127426, 129497, 0},
  };
  const std::vector<int64> demands{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  const std::vector<int64> vehicle_capacities{13, 13, 13, 13};
  const int num_vehicles = 4;
  const RoutingIndexManager::NodeIndex depot{0};
};

//! @brief Print the solution.
//! @param[in] data Data of the problem.
//! @param[in] manager Index manager used.
//! @param[in] routing Routing solver used.
//! @param[in] solution Solution found by the solver.
void PrintSolution(const DataModel& data, const RoutingIndexManager& manager,
                   const RoutingModel& routing, const Assignment& solution) {
  int64 total_distance{0};
  int64 total_load{0};
  for (int vehicle_id = 0; vehicle_id < data.num_vehicles; ++vehicle_id) {
    int64 index = routing.Start(vehicle_id);
    LOG(INFO) << "Route for Vehicle " << vehicle_id << ":";
    int64 route_distance{0};
    int64 route_load{0};
    std::stringstream route;
    while (routing.IsEnd(index) == false) {
      int64 node_index = manager.IndexToNode(index).value();
      route_load += data.demands[node_index];
      route << node_index << " Load(" << route_load << ") -> ";
      int64 previous_index = index;
      index = solution.Value(routing.NextVar(index));
      route_distance += routing.GetArcCostForVehicle(previous_index, index,
                                                     int64{vehicle_id});
    }
    LOG(INFO) << route.str() << manager.IndexToNode(index).value();
    LOG(INFO) << "Distance of the route: " << route_distance << "m";
    LOG(INFO) << "Load of the route: " << route_load;
    total_distance += route_distance;
    total_load += route_load;
  }
  LOG(INFO) << "Total distance of all routes: " << total_distance << "m";
  LOG(INFO) << "Total load of all routes: " << total_load;
  LOG(INFO) << "";
  LOG(INFO) << "Advanced usage:";
  LOG(INFO) << "Problem solved in " << routing.solver()->wall_time() << "ms";
}

void VrpCapacity() {
  // Instantiate the data problem.
  DataModel data;

  // Create Routing Index Manager
  RoutingIndexManager manager(data.distance_matrix.size(), data.num_vehicles,
                              data.depot);

  // Create Routing Model.
  RoutingModel routing(manager);

  // Create and register a transit callback.
  const int transit_callback_index = routing.RegisterTransitCallback(
      [&data, &manager](int64 from_index, int64 to_index) -> int64 {
        // Convert from routing variable Index to distance matrix NodeIndex.
        auto from_node = manager.IndexToNode(from_index).value();
        auto to_node = manager.IndexToNode(to_index).value();
        return data.distance_matrix[from_node][to_node];
      });

  // Define cost of each arc.
  routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index);

  // Add Capacity constraint.
  const int demand_callback_index = routing.RegisterUnaryTransitCallback(
      [&data, &manager](int64 from_index) -> int64 {
        // Convert from routing variable Index to demand NodeIndex.
        int from_node = manager.IndexToNode(from_index).value();
        return data.demands[from_node];
      });
  routing.AddDimensionWithVehicleCapacity(
      demand_callback_index,    // transit callback index
      int64{0},                 // null capacity slack
      data.vehicle_capacities,  // vehicle maximum capacities
      true,                     // start cumul to zero
      "Capacity");

  // Setting first solution heuristic.
  RoutingSearchParameters searchParameters = DefaultRoutingSearchParameters();
  searchParameters.set_first_solution_strategy(FirstSolutionStrategy::PATH_CHEAPEST_ARC);

  // Solve the problem.
  const Assignment* solution = routing.SolveWithParameters(searchParameters);

  // Print solution on console.
  PrintSolution(data, manager, routing, *solution);
}
}  // namespace operations_research

int main(int argc, char** argv) {
  operations_research::VrpCapacity();
  return EXIT_SUCCESS;
}
